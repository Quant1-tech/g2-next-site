{"markdown":"# Jitter\n\nThe **jitter** transform produce dy channels for marks (especially for point) with ordinal x and y dimension, say to make them jitter in their own space. It is useful to see the density of distribution for data.\n\n- _Jitter_ - Produce both dx and y channels.\n- _JitterY_ - Produce only dy channel, which result in produce dy channel in transpose coordinate.\n\nIt also support _padding_ option to specify padding of space.\n\n## Jitter Both\n\n```js\nG2.render({\n  type: 'point',\n  transform: [\n    {\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    },\n    { type: 'jitter' },\n  ],\n  scale: { x: { padding: 0.5 }, y: { guide: null } },\n  encode: {\n    x: 'clarity',\n    color: 'clarity',\n  },\n});\n```\n\n## Jitter In Polar\n\nSpecify _paddingX_ and _paddingY_ option for jitter.\n\n```js\nG2.render({\n  type: 'point',\n  transform: [\n    {\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    },\n    { type: 'jitter', paddingX: 0.05, paddingY: 0.05 },\n  ],\n  paddingLeft: 90,\n  coordinate: [{ type: 'polar' }],\n  scale: {\n    x: { padding: 0.5 },\n    y: { padding: 0.5 },\n  },\n  encode: {\n    x: 'clarity',\n    y: 'cut',\n    color: (d) => `(${d.clarity}, ${d.cut})`,\n  },\n});\n```\n\n## JitterY\n\nSpecify _padding_ option for jitterY.\n\n```js\nG2.render({\n  type: 'point',\n  transform: [\n    {\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    },\n    { type: 'jitterY', padding: 0.1 },\n  ],\n  paddingLeft: 90,\n  scale: {\n    x: { padding: 0.5 },\n    y: { padding: 0.5 },\n    color: { guide: null },\n  },\n  encode: {\n    x: 'clarity',\n    y: 'cut',\n    shape: 'hyphen',\n    size: 25,\n  },\n});\n```\n"}