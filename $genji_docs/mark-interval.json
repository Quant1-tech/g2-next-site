{"markdown":"# Interval\n\n## Basic Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('label', 'sold');\n\n  return chart.render().node();\n})();\n```\n\n## Flex Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .scale('x', { flex: [2, 3, 1, 4, 2] });\n\n  return chart.render().node();\n})();\n```\n\n## Hollow Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('shape', 'hollowRect');\n\n  return chart.render().node();\n})();\n```\n\n## Transpose Interval\n\n```js\n(() => {\n  const chart = new G2.Chart({ paddingLeft: 72 });\n\n  chart.coordinate({ type: 'transpose' });\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  return chart.render().node();\n})();\n```\n\n## Polar Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.coordinate({ type: 'polar' });\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .scale('x', { padding: 0.05 })\n    .scale('y', { guide: null })\n    .style('radius', 10);\n\n  return chart.render().node();\n})();\n```\n\n## Reflect Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.coordinate({ type: 'reflect' });\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .scale('x', { padding: 0.05 })\n    .scale('y', { guide: null })\n    .style('radius', 10);\n\n  return chart.render().node();\n})();\n```\n\n## Helix Interval\n\n```js\n(() => {\n  // mock data\n  const data = [];\n  const n = 31;\n  for (let i = 0; i < 372; i++) {\n    const now = Date();\n    data[i] = {};\n    data[i].time = new Date(now).getTime() + i * 1000 * 3600 * 24;\n    const random = Math.floor(Math.random() * 10);\n    if ((i % n > 2 && i % n < 4) || (i % n >= 6 && i % n < 7)) {\n      data[i].value = 30 + random * 7;\n    } else if (i % n >= 4 && i % n < 6) {\n      data[i].value = 60 + random * 8;\n    } else {\n      data[i].value = 10 + random * 5;\n    }\n  }\n  const chart = new G2.Chart();\n\n  chart.coordinate({\n    type: 'helix',\n    startAngle: 0.5 * Math.PI,\n    endAngle: 12.5 * Math.PI,\n  });\n\n  chart\n    .interval()\n    .data(data)\n    .encode('x', 'time')\n    .encode('y', 'value')\n    .encode('color', 'time');\n\n  return chart.render().node();\n})();\n```\n\n## Polar+Transpose Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.coordinate({ type: 'transpose' }).coordinate({ type: 'polar' });\n\n  //@todo Hide the last label to avoid overlap.\n  //@todo Maybe don't need to specify guide type?\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .scale('color', { guide: { position: 'right', size: 65 } })\n    .scale('y', { guide: { type: 'axisY' } });\n\n  return chart.render().node();\n})();\n```\n\n## Theta Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.coordinate({ type: 'theta' });\n\n  //@todo Hide the last label to avoid overlap.\n  //@todo Maybe don't need to specify guide type?\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .scale('color', { guide: { position: 'right', size: 65 } })\n    .scale('y', { guide: { type: 'axisY' } });\n\n  return chart.render().node();\n})();\n```\n\n## Polar+Transpose+StackY Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.coordinate({ type: 'transpose' }).coordinate({ type: 'polar' });\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  return chart.render().node();\n})();\n```\n\n## StackY Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city');\n\n  return chart.render().node();\n})();\n```\n\n## DodgeX Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city')\n    .encode('series', 'city');\n\n  return chart.render().node();\n})();\n```\n\n## StackY+DodgeX Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antfincdn/mor%26R5yBI9/stack-group-column.json',\n    })\n    .encode('x', 'product_type')\n    .encode('y', 'order_amt')\n    .encode('color', 'product_sub_type')\n    .encode('series', 'sex');\n\n  return chart.render().node();\n})();\n```\n\n## Range Interval\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    paddingLeft: 60,\n  });\n\n  chart\n    .interval()\n    .data([\n      { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n      { month: 'Feb.', profit: 772096, start: 387264, end: 1159360 },\n      { month: 'Mar.', profit: 638075, start: 1159360, end: 1797435 },\n      { month: 'Apr.', profit: -211386, start: 1797435, end: 1586049 },\n      { month: 'May', profit: -138135, start: 1586049, end: 1447914 },\n      { month: 'Jun', profit: -267238, start: 1447914, end: 1180676 },\n      { month: 'Jul.', profit: 431406, start: 1180676, end: 1612082 },\n      { month: 'Aug.', profit: 363018, start: 1612082, end: 1975100 },\n      { month: 'Sep.', profit: -224638, start: 1975100, end: 1750462 },\n      { month: 'Oct.', profit: -299867, start: 1750462, end: 1450595 },\n      { month: 'Nov.', profit: 607365, start: 1450595, end: 2057960 },\n      { month: 'Dec.', profit: 1106986, start: 2057960, end: 3164946 },\n      { month: 'Total', start: 0, end: 3164946 },\n    ])\n    .encode('x', 'month')\n    .encode('y', ['end', 'start'])\n    .encode('color', (d) =>\n      d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n    );\n\n  return chart.render().node();\n})();\n```\n"}