{"markdown":"# StackEnter\n\n## Group by X\n\nIntervals show group one by group.\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { type: 'Apple', year: '2001', value: 260 },\n      { type: 'Orange', year: '2001', value: 100 },\n      { type: 'Banana', year: '2001', value: 90 },\n      { type: 'Apple', year: '2002', value: 210 },\n      { type: 'Orange', year: '2002', value: 150 },\n      { type: 'Banana', year: '2002', value: 30 },\n    ])\n    .transform({ type: 'stackEnter', by: ['x'] })\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('color', 'type')\n    .encode('series', 'type')\n    .encode('enterDuration', 1000)\n    // @todo EnterDuration scale is better.\n    .scale('enter', { type: 'identity' });\n\n  return chart.render().node();\n})();\n```\n\n## Group by Color\n\nIntervals shows up series by series.\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { type: 'Apple', year: '2001', value: 260 },\n      { type: 'Orange', year: '2001', value: 100 },\n      { type: 'Banana', year: '2001', value: 90 },\n      { type: 'Apple', year: '2002', value: 210 },\n      { type: 'Orange', year: '2002', value: 150 },\n      { type: 'Banana', year: '2002', value: 30 },\n    ])\n    .transform({ type: 'stackEnter', by: ['color'] })\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('color', 'type')\n    .encode('series', 'type')\n    .encode('enterDuration', 1000)\n    .scale('enter', { type: 'identity' });\n\n  return chart.render().node();\n})();\n```\n\n## Group by Color and X\n\nIntervals shows up series by series then group by group.\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { type: 'Apple', year: '2001', value: 260 },\n      { type: 'Orange', year: '2001', value: 100 },\n      { type: 'Banana', year: '2001', value: 90 },\n      { type: 'Apple', year: '2002', value: 210 },\n      { type: 'Orange', year: '2002', value: 150 },\n      { type: 'Banana', year: '2002', value: 30 },\n    ])\n    .transform({ type: 'stackEnter', by: ['color', 'x'] })\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('color', 'type')\n    .encode('series', 'type')\n    .encode('enterDuration', 1000)\n    .scale('enter', { type: 'identity' });\n\n  return chart.render().node();\n})();\n```\n\n## Group by X and Color\n\nIntervals shows up group by group and then series by series.\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { type: 'Apple', year: '2001', value: 260 },\n      { type: 'Orange', year: '2001', value: 100 },\n      { type: 'Banana', year: '2001', value: 90 },\n      { type: 'Apple', year: '2002', value: 210 },\n      { type: 'Orange', year: '2002', value: 150 },\n      { type: 'Banana', year: '2002', value: 30 },\n    ])\n    .transform({ type: 'stackEnter', by: ['x', 'color'] })\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('color', 'type')\n    .encode('series', 'type')\n    .encode('enterDuration', 1000)\n    .scale('enter', { type: 'identity' });\n\n  return chart.render().node();\n})();\n```\n\n## For Stack Interval\n\nStackEnter is useful for stack intervals.\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { type: 'Apple', year: '2001', value: 260 },\n      { type: 'Orange', year: '2001', value: 100 },\n      { type: 'Banana', year: '2001', value: 90 },\n      { type: 'Apple', year: '2002', value: 210 },\n      { type: 'Orange', year: '2002', value: 150 },\n      { type: 'Banana', year: '2002', value: 30 },\n    ])\n    .transform({ type: 'stackEnter', by: ['color'] })\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('color', 'type')\n    .encode('enterDuration', 1000)\n    .scale('enter', { type: 'identity' });\n\n  return chart.render().node();\n})();\n```\n"}