{"markdown":"# Encode\n\n## Field\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre', // Field Encode\n    y: 'sold', // Field Encode\n  },\n});\n```\n\n## Constant\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'orange', // Constant Encode\n  },\n});\n```\n\n## Transform\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    // Transform Encode\n    // It is not visual data by default.\n    color: (d) => (d.sold > 200 ? 'high' : 'low'),\n  },\n});\n```\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  scale: {\n    // This will make channel values for color visual data.\n    color: { type: 'identity' },\n  },\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: (d) => (d.sold > 200 ? 'orange' : 'steelblue'),\n  },\n});\n```\n\n## Custom\n\n```js | dom\n(() => {\n  const Proportion = ({ value }) => {\n    return (data) => {\n      const sum = data.reduce((total, e) => total + e[value], 0);\n      return data.map((d) => d[value] / sum);\n    };\n  };\n  return G2.render({\n    type: 'interval',\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: {\n      x: 'genre',\n      y: { type: Proportion, value: 'sold' },\n    },\n  });\n})();\n```\n\n```js\n(() => {\n  const Proportion = ({ value }) => {\n    return (data) => {\n      const sum = data.reduce((total, e) => total + e[value], 0);\n      return data.map((d) => d[value] / sum);\n    };\n  };\n\n  const context = {\n    library: Object.assign(G2.createLibrary(), {\n      'encode.proportion': Proportion,\n    }),\n  };\n\n  return G2.render(\n    {\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      encode: {\n        x: 'genre',\n        y: { type: 'proportion', value: 'sold' },\n      },\n    },\n    context,\n  );\n})();\n```\n"}