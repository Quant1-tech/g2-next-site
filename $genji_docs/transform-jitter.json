{"markdown":"# Jitter\n\nThe **jitter** transform produce dy channels for marks (especially for point) with ordinal x and y dimension, say to make them jitter in their own space. It is useful to see the density of distribution for data.\n\n- _Jitter_ - Produce both dx and y channels.\n- _JitterY_ - Produce only dy channel, which result in produce dy channel in transpose coordinate.\n\nIt also support _padding_ option to specify padding of space.\n\n## Jitter Both\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    })\n    .transform({ type: 'jitter' })\n    .encode('x', 'clarity')\n    .encode('color', 'clarity')\n    .scale('x', { padding: 0.5 })\n    .scale('y', { guide: null });\n\n  return chart.render().node();\n})();\n```\n\n## Jitter In Polar\n\nSpecify _paddingX_ and _paddingY_ option for jitter.\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.coordinate({ type: 'polar' });\n\n  chart\n    .point()\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    })\n    .transform({ type: 'jitter', paddingX: 0.05, paddingY: 0.05 })\n    .encode('x', 'clarity')\n    .encode('y', 'cut')\n    .encode('color', (d) => `(${d.clarity}, ${d.cut})`)\n    .scale('x', { padding: 0.5 })\n    .scale('y', { padding: 0.5, guide: null })\n    .scale('color', { guide: null });\n\n  return chart.render().node();\n})();\n```\n\n## JitterY\n\nSpecify _padding_ option for jitterY.\n\n```js\n(() => {\n  const chart = new G2.Chart({ paddingLeft: 90 });\n\n  chart\n    .point()\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    })\n    .transform({ type: 'jitterY', padding: 0.1 })\n    .encode('x', 'clarity')\n    .encode('y', 'cut')\n    .encode('shape', 'hyphen')\n    .encode('size', 25)\n    .scale('x', { padding: 0.5 })\n    .scale('y', { padding: 0.5 })\n    .scale('color', { guide: null });\n\n  return chart.render().node();\n})();\n```\n"}