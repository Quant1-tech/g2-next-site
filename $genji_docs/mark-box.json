{"markdown":"# Box\n\nBox 图形是用来绘制箱线图（boxplot）又叫盒须图、盒式图，通常用来展示一组数据分布情况的统计图，一般包括几种数据：`最小值`、`下四分位数`、`中位数`、`上四分位数`、`最大值`，另外可以结合 `point` mark 绘制异常点数据。\n\n<img alt=\"box\" width=\"100%\" style=\"max-width: 400px\" src=\"https://gw.alipayobjects.com/zos/antfincdn/f6WEf%24CrgE/20220913111713.jpg\" />\n\nBox 特殊的一点在于 `y` 通道对应的数据是一组统计数据的数组，最后会将数据映射为箱线图所需求的 14 个点集合。\n\n```text\n/**\n *\n * p0           p2          p1\n *    ──────────┬──────────\n *              │\n *              │\n *              │\n *              │ p3\n * p4 ┌─────────┴──────────┐ p5\n *    │                    │\n *    │                    │\n * p8 ├────────────────────┤ p9\n *    │                    │\n *    │        p10         │\n * p7 └─────────┬──────────┘ p6\n *              │\n *              │\n *              │\n *   ───────────┴───────────\n * p12         p11           p13\n */\n```\n\n## 快速开始\n\n```js | table \"pin: false\"\ndata = [\n  { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n  { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n  { x: 'Australia', y: [1, 8, 12, 19, 26] },\n  { x: 'South America', y: [2, 8, 12, 21, 28] },\n  { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n  { x: 'North America', y: [3, 10, 17, 28, 30] },\n  { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n  { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n];\n```\n\n```js\n(() => {\n  const chart = new G2.Chart({ width: 720 });\n\n  chart\n    .box()\n    .data(data)\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('color', 'x')\n    .scale('x', { paddingInner: 0.6, paddingOuter: 0.3 })\n    .scale('y', { zero: true })\n    .legend(false)\n    .style('stroke', 'black');\n\n  return chart.render().node();\n})();\n```\n\n## API\n\n`Box` 对应的 shape 图形有以下：\n\n| shape | 描述                       | 示例                                                                                                               |\n| ----- | -------------------------- | ------------------------------------------------------------------------------------------------------------------ |\n| box   | 箱线图，又叫盒须图、盒式图 | <img alt=\"box shape\" height=\"32\" src=\"https://gw.alipayobjects.com/zos/antfincdn/3Yx5VGjRbW/20220913112556.jpg\" /> |\n\n## 使用方式\n\n和其他 mark 一样，可以通过指定 `color` 通道，将不同的数据按照颜色分组标记出来。\n\n```js | table \"pin: false\"\ndataWithColor = [\n  {\n    Species: 'I. setosa',\n    type: 'SepalLength',\n    value: 5.1,\n    bin: [4.3, 4.8, 5, 5.2, 5.8],\n  },\n  {\n    Species: 'I. setosa',\n    type: 'SepalWidth',\n    value: 3.5,\n    bin: [2.3, 3.2, 3.4, 3.7, 4.4],\n  },\n  {\n    Species: 'I. setosa',\n    type: 'PetalLength',\n    value: 1.4,\n    bin: [1, 1.4, 1.5, 1.6, 1.9],\n  },\n  {\n    Species: 'I. setosa',\n    type: 'PetalWidth',\n    value: 0.2,\n    bin: [0.1, 0.2, 0.2, 0.3, 0.6],\n  },\n  {\n    Species: 'I. versicolor',\n    type: 'SepalLength',\n    value: 7,\n    bin: [4.9, 5.6, 5.9, 6.3, 7],\n  },\n  {\n    Species: 'I. versicolor',\n    type: 'SepalWidth',\n    value: 3.2,\n    bin: [2, 2.5, 2.8, 3, 3.4],\n  },\n  {\n    Species: 'I. versicolor',\n    type: 'PetalLength',\n    value: 4.7,\n    bin: [3, 4, 4.35, 4.6, 5.1],\n  },\n  {\n    Species: 'I. versicolor',\n    type: 'PetalWidth',\n    value: 1.4,\n    bin: [1, 1.2, 1.3, 1.5, 1.8],\n  },\n  {\n    Species: 'I. virginica',\n    type: 'SepalLength',\n    value: 6.3,\n    bin: [4.9, 6.2, 6.5, 6.9, 7.9],\n  },\n  {\n    Species: 'I. virginica',\n    type: 'SepalWidth',\n    value: 3.3,\n    bin: [2.2, 2.8, 3, 3.2, 3.8],\n  },\n  {\n    Species: 'I. virginica',\n    type: 'PetalLength',\n    value: 6,\n    bin: [4.5, 5.1, 5.55, 5.9, 6.9],\n  },\n  {\n    Species: 'I. virginica',\n    type: 'PetalWidth',\n    value: 2.5,\n    bin: [1.4, 1.8, 2, 2.3, 2.5],\n  },\n];\n```\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .box()\n    .data(dataWithColor)\n    .encode('x', 'type')\n    .encode('y', 'bin')\n    .encode('series', 'Species')\n    .encode('color', 'Species')\n    .scale('x', { paddingInner: 0.2, paddingOuter: 0.1 })\n    .scale('y', { zero: true })\n    .scale('series', { paddingInner: 0.3, paddingOuter: 0.1 })\n    .style('stroke', 'black');\n\n  return chart.render().node();\n})();\n```\n\n另外，我们也可以在一个 `polar` 坐标系下查看箱线图，自带的 `box` 图形会自动对图形边缘进行平滑处理；也可以增加 `transpose` 让箱线图变成一个横向的。\n\n```js | radio \"options: { labels: ['polar', 'transpose'], values: ['polar', 'transpose'] }; pin: false\"\ncoordinate = 'polar';\n```\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .box()\n    .data(dataWithColor)\n    .encode('x', 'type')\n    .encode('y', 'bin')\n    .encode('series', 'Species')\n    .encode('color', 'Species')\n    .scale('x', { paddingInner: 0.2, paddingOuter: 0.1 })\n    .scale('y', { zero: true })\n    .scale('series', { paddingInner: 0.3, paddingOuter: 0.1 })\n    .style('stroke', 'black');\n\n  chart.coordinate({ type: coordinate });\n\n  return chart.render().node();\n})();\n```\n\n## FAQ\n\n- 怎么在前端进行数据分布情况的分析？\n\nG2 的 `transform` 可以进行数据的转换，这里就可以实现对数据进行 `最小值`、`下四分位数`、`中位数`、`上四分位数`、`最大值` 的统计，当然也可以调用社区提供的[算法库](https://github.com/antvis/data-set/blob/master/src/transform/aggregate.ts)。\n\n```ts\nchart.box().data({\n  type: 'connector',\n  value: [\n    /* your detail data */\n  ],\n  callback: (data) => {\n    // todo: aggregate your data, and return it.\n    return data;\n  },\n});\n```\n"}