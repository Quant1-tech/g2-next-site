{"markdown":"# Image\n\n`Image` 标记和 `Point` 标记很类似，都是以 `x`，`y` 数据通道作为位置居中定位，区别在于 `Image` 提供一个特殊的 `src` 数据通道，来指定图片的远程地址或者 base64。\n\n\n## 快速开始\n\n这里有一个简单的浏览器占比数据，我们对它进行可视化，便于看到不同浏览器的占比对比。\n\n```js | table \"pin: false\"\ndata = [\n  {\n    name: 'Internet Explorer',\n    value: 26,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eOYRaLPOmkieVvjyjTzM.png',\n  },\n  {\n    name: 'Chrome',\n    value: 40,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/dWJWRLWfpOEbwCyxmZwu.png',\n  },\n  {\n    name: 'Firefox',\n    value: 30,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/ZEPeDluKmAoTioCABBTc.png',\n  },\n  {\n    name: 'Safari',\n    value: 24,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eZYhlLzqWLAYwOHQAXmc.png',\n  },\n  {\n    name: 'Opera',\n    value: 15,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/vXiGOWCGZNKuVVpVYQAw.png',\n  },\n  {\n    name: 'Undetectable',\n    value: 8,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/NjApYXminrnhBgOXyuaK.png',\n  },\n];\n```\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .image()\n    .data(data)\n    .encode('x', 'name')\n    .encode('y', 'value')\n    .encode('src', 'url')\n    .scale('x', { type: 'band' })\n    .scale('y', { zero: true });\n\n  return chart.render().node();\n})();\n```\n\n\n## 使用方式\n\n未了让上述可视化图表看起来更好看，我们可以增加一个浏览器图标到 x 轴的连接线。\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.data(data);\n\n  chart\n    .link()\n    .encode('x', ['name', 'name'])\n    .encode('y', (d) => [0, d.value])\n    .encode('src', 'url')\n    .style('stroke', '#dfdfdf')\n    .style('lineDash', [2, 2]);\n\n  chart\n    .image()\n    .encode('x', 'name')\n    .encode('y', 'value')\n    .encode('src', 'url')\n    .scale('x', { type: 'band' })\n    .scale('y', { domain: [0, 50] });\n\n  return chart.render().node();\n})();\n```\n\n当然，也可以增加一个 `Line` mark 来展示浏览器占比变化的趋势。\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.data(data);\n\n  chart\n    .link()\n    .encode('x', ['name', 'name'])\n    .encode('y', (d) => [0, d.value])\n    .encode('src', 'url')\n    .style('stroke', '#dfdfdf')\n    .style('lineDash', [2, 2]);\n  \n  chart\n    .line()\n    .encode('x', 'name')\n    .encode('y', 'value')\n    .encode('shape', 'smooth')\n    .scale('x', { type: 'band' })\n    .scale('y', { domain: [0, 50] })\n    .style('opacity', 0.5);\n\n  chart\n    .image()\n    .encode('x', 'name')\n    .encode('y', 'value')\n    .encode('src', 'url')\n    .scale('x', { type: 'band' })\n    .scale('y', { domain: [0, 50] });\n\n  return chart.render().node();\n})();\n```\n\n最后，我们来绘制一个更有意思一点的例子吧！\n\n```js | table \"pin: false; maxCount: 3\"\ndataXO = [\n  {\n    x: 0,\n    y: 0.241,\n    type: 'x',\n  },\n  {\n    x: 1,\n    y: 0.367,\n    type: 'x',\n  },\n  {\n    x: 2,\n    y: 0.036,\n    type: 'x',\n  },\n  {\n    x: 3,\n    y: 0.112,\n    type: 'o',\n  },\n  {\n    x: 4,\n    y: 0.382,\n    type: 'x',\n  },\n  {\n    x: 5,\n    y: 0.594,\n    type: 'o',\n  },\n  {\n    x: 6,\n    y: 0.516,\n    type: 'o',\n  },\n  {\n    x: 7,\n    y: 0.634,\n    type: 'x',\n  },\n  {\n    x: 8,\n    y: 0.612,\n    type: 'x',\n  },\n  {\n    x: 9,\n    y: 0.271,\n    type: 'o',\n  },\n  {\n    x: 10,\n    y: 0.241,\n    type: 'o',\n  },\n  {\n    x: 11,\n    y: 0.955,\n    type: 'o',\n  },\n  {\n    x: 12,\n    y: 0.336,\n    type: 'x',\n  },\n  {\n    x: 13,\n    y: 0.307,\n    type: 'x',\n  },\n  {\n    x: 14,\n    y: 0.747,\n    type: 'x',\n  },\n];\n```\n\n```js\n(() => {\n  const x = 'https://gw.alipayobjects.com/zos/antfincdn/xYAYJ3T969/94c968a3f33eac63c63b87b2f0f6cd97e2db624c65646d6839a5eb4d9c1b5543e922befd040cc5d55deaaa1c7e57c0075a186aa25874490616f2652d11f08592.svg';\n  const o = 'https://gw.alipayobjects.com/zos/antfincdn/JtFvbgBbjN/3917899b7468c526a5bfe18f94d3cf1cfedf7a7c808976870a866d71d4a322af778ffb34fd3c06783be80ff60b10be3279d5dbc82f07a7201f4978130bc8edd6.svg'\n\n  const chart = new G2.Chart();\n  chart\n    .image()\n    .data(dataXO)\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('size', 'y')\n    .encode('src', ({ type }) => type === 'x' ? x : o)\n    .scale('x', { type: 'band' })\n    .scale('y', { domain: [0, 1] })\n    .scale('size', { type: 'linear', range: [12, 32] });\n\n  return chart.render().node();\n})();\n```\n\n\n## FAQ\n\n- 图片的 `src` 通道支持哪些数据类型？\n\n最终的绘制都是调用 [G](https://github.com/antvis/g) 去渲染，所以支持的数据类型和 G 的原子 `Image` 图形保持一致，支持：`远程地址`、`base64`、`blob`、`file`。\n"}