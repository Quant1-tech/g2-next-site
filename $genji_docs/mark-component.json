{"markdown":"# Component\n\n<!-- Title\n\n\nG2.render({\n  title: 'Basic usage.',\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n  },\n});\n\n\n\nG2.render({\n  title: {\n    size: 60,\n    text: 'Title with subtitle and custom style.',\n    style: { fontSize: 18 },\n    subtitle: 'Description of chart.',\n    subtitleStyle: { fill: 'grey' },\n  },\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  scale: { color: { guide: { title: null } } },\n  encode: {\n    x: 'genre',\n    y: 'sold',\n  },\n}); -->\n\n## Legend\n\nLegend component will be generate from a **color** scale.\n\nIf the scale is ordinal or categorical, by default the legend appears as a categorical legend, otherwise the legend appears as a continuous if the scale is continuous.\n\n### Categorical\n\n**Basic categorical legend.**\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  return chart.render().node();\n})();\n```\n\n**Custom legend.**\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .area()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/e58c9758-0a09-4527-aa90-fbf175b45925.json',\n    })\n    .transform({ type: 'stackY', orderBy: 'sum' })\n    .encode('x', (d) => new Date(d.date))\n    .encode('y', 'unemployed')\n    .encode('color', 'industry')\n    .encode('shape', 'smoothArea')\n    .scale('x', { field: 'Date', utc: true })\n    .scale('y', { guide: { formatter: (d) => `${+d / 1000}k` } })\n    .scale('color', {\n      guide: { size: 72, autoWrap: true, maxRows: 3, cols: 6 },\n    });\n\n  return chart.render().node();\n})();\n```\n\n### Continuous\n\n```js\n(() => {\n  const chart = new G2.Chart({ paddingLeft: 60 });\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    })\n    .transform({ type: 'groupX', y: 'mean' })\n    .encode('x', 'clarity')\n    .encode('y', 'price')\n    .encode('color', 'price')\n    .scale('color', { range: ['yellow', 'orange'] });\n\n  return chart.render().node();\n})();\n```\n\n## Axis\n\n### title\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .scale('x', {\n      guide: {\n        title: {\n          titleAnchor: 'end',\n          content: 'genre →',\n          style: { fontWeight: 'lighter' },\n        },\n      },\n    })\n    .scale('y', {\n      guide: {\n        title: {\n          // relative to axis line.\n          positionX: -8,\n          positionY: -12,\n          content: 'sold ↑',\n          rotate: 0,\n          style: { fontWeight: 'lighter' },\n        },\n      },\n    });\n\n  return chart.render().node();\n})();\n```\n\n### label\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 640,\n    height: 300,\n  });\n\n  chart.data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/antvdemo/assets/data/blockchain.json',\n    transform: [\n      {\n        type: 'fold',\n        fields: ['blockchain', 'nlp'],\n        as: ['metric', 'value'],\n      },\n    ],\n  });\n\n  chart\n    .line()\n    .encode('x', (d) => new Date(d.date))\n    .encode('y', 'value')\n    .encode('color', 'metric')\n    .scale('x', {\n      guide: {\n        label: {\n          autoHide: 'greedy',\n          showLast: false,\n          style: (datum, idx, data) => {\n            const isYear = (d) => !Number.isNaN(Number(d));\n            return {\n              fontWeight: isYear(datum.text) ? 'bold' : 'lighter',\n            };\n          },\n        },\n      },\n    })\n    .scale('color', { guide: null });\n\n  return chart.render().node();\n})();\n```\n"}