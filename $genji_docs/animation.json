{"markdown":"# Animation\n\n## TimeEffect\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .animate('enter', {\n      duration: 1000, //  Specify effect time by animate options.\n      delay: 300,\n    });\n\n  return chart.render().node();\n})();\n```\n\n## Animation Type\n\n### FadeIn\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .animate('enter', {\n      type: 'fadeIn', //  Specify animation type.\n      duration: 2000,\n    });\n\n  return chart.render().node();\n})();\n```\n\n### WaveIn\n```js\n(() => {\n  const chart = new G2.Chart({ height: 640 });\n\n  chart.coordinate({ type: 'theta' });\n\n  chart\n    .interval()\n    .transform({ type: 'stackY' })\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/79fd9317-d2af-4bc4-90fa-9d07357398fd.csv',\n    })\n    .encode('y', 'value')\n    .encode('color', 'name')\n    .style('stroke', 'white')\n    .scale('color', {\n      guide: null,\n      palette: 'spectral',\n      offset: (t) => t * 0.8 + 0.1,\n    })\n    .label({ text: 'name', radius: 0.8, fontSize: 10, fontWeight: 'bold' })\n    .label({\n      text: (d, i, data) => (i < data.length - 3 ? d.value : ''),\n      radius: 0.8,\n      fontSize: 9,\n      dy: '0.75em',\n    })\n    .animate('enter', {\n      type: 'waveIn',\n      duration: 2000,\n  \t});\n\n  return chart.render().node();\n})();\n```\n\n## Encode EnterType\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('enterType', (d) => (d.sold > 200 ? 'high' : 'low'))\n    .scale('enterType', { range: ['scaleInY', 'fadeIn'] })\n    .animate('enter', { duration: 3000 });\n\n  return chart.render().node();\n})();\n```\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('enterType', (d) => (d.sold > 200 ? 'scaleInY' : 'fadeIn'))\n    .scale('enterType', { type: 'identity' })\n    .animate('enter', { duration: 3000 });\n\n  return chart.render().node();\n})();\n```\n\n## Encode EnterDelay and EnterDuration\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 720,\n    paddingTop: 60,\n    paddingLeft: 100,\n  });\n\n  chart.coordinate({ type: 'transpose' });\n\n  chart\n    .interval()\n    .data([\n      { name: 'event planning', startTime: 1, endTime: 4 },\n      { name: 'layout logistics', startTime: 3, endTime: 13 },\n      { name: 'select vendors', startTime: 5, endTime: 8 },\n      { name: 'hire venue', startTime: 9, endTime: 13 },\n      { name: 'hire caterer', startTime: 10, endTime: 14 },\n      { name: 'hire event decorators', startTime: 12, endTime: 17 },\n      { name: 'rehearsal', startTime: 14, endTime: 16 },\n      { name: 'event celebration', startTime: 17, endTime: 18 },\n    ])\n    .encode('x', 'name')\n    .encode('y', ['endTime', 'startTime'])\n    .encode('color', 'name')\n    // The appear time of interval is linearly related to startTime.\n    .encode('enterDelay', 'startTime')\n    // The duration of interval animation is linearly related to duration time.\n    .encode('enterDuration', (d) => d.endTime - d.startTime)\n    // All the intervals will show up in 10s.\n    // But the animation will take more than 10s to finish.\n    .scale('enter', { range: [0, 10000], zero: true })\n    .scale('color', {\n      guide: { size: 60, autoWrap: true, maxRows: 2, cols: 5 },\n    });\n\n  return chart.render().node();\n})();\n```\n"}