{"markdown":"# Animation\n\n## Animate Options\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n  animate: {\n    enter: {\n      duration: 1000, //  Specify effect time by animate options.\n      delay: 300,\n    },\n  },\n});\n```\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n  },\n  animate: {\n    enter: {\n      type: 'fadeIn', //  Specify animation type.\n      duration: 2000,\n    },\n  },\n});\n```\n\n## Encode EnterType\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  scale: {\n    enterType: { range: ['scaleInY', 'fadeIn'] }, // Specify animation types.\n  },\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n    enterType: (d) => (d.sold > 200 ? 'high' : 'low'),\n  },\n  animate: {\n    enter: {\n      duration: 3000,\n    },\n  },\n});\n```\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  scale: {\n    enterType: { type: 'identity' },\n  },\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    color: 'genre',\n    enterType: (d) => (d.sold > 200 ? 'scaleInY' : 'fadeIn'),\n  },\n  animate: {\n    enter: {\n      duration: 3000,\n    },\n  },\n});\n```\n\n## Encode EnterDelay and EnterDuration\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { name: 'event planning', startTime: 1, endTime: 4 },\n    { name: 'layout logistics', startTime: 3, endTime: 13 },\n    { name: 'select vendors', startTime: 5, endTime: 8 },\n    { name: 'hire venue', startTime: 9, endTime: 13 },\n    { name: 'hire caterer', startTime: 10, endTime: 14 },\n    { name: 'hire event decorators', startTime: 12, endTime: 17 },\n    { name: 'rehearsal', startTime: 14, endTime: 16 },\n    { name: 'event celebration', startTime: 17, endTime: 18 },\n  ],\n  coordinate: [{ type: 'transpose' }],\n  scale: {\n    // All the intervals will show up in 10s.\n    // But the animation will take more than 10s to finish.\n    enter: { range: [0, 10000], zero: true },\n  },\n  encode: {\n    x: 'name',\n    y: ['endTime', 'startTime'],\n    color: 'name',\n    // The appear time of interval is linearly related to startTime.\n    enterDelay: 'startTime',\n    // The duration of interval animation is linearly related to duration time.\n    enterDuration: (d) => d.endTime - d.startTime,\n  },\n});\n```\n\n## StackEnter\n\nIntervals show group one by group.\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { type: 'Apple', year: '2001', value: 260 },\n    { type: 'Orange', year: '2001', value: 100 },\n    { type: 'Banana', year: '2001', value: 90 },\n    { type: 'Apple', year: '2002', value: 210 },\n    { type: 'Orange', year: '2002', value: 150 },\n    { type: 'Banana', year: '2002', value: 30 },\n  ],\n  scale: { enter: { type: 'identity' } },\n  transform: [{ type: 'stackEnter', by: ['x'] }],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'type',\n    series: 'type',\n    enterDuration: 1000,\n  },\n});\n```\n\nIntervals shows up series by series.\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { type: 'Apple', year: '2001', value: 260 },\n    { type: 'Orange', year: '2001', value: 100 },\n    { type: 'Banana', year: '2001', value: 90 },\n    { type: 'Apple', year: '2002', value: 210 },\n    { type: 'Orange', year: '2002', value: 150 },\n    { type: 'Banana', year: '2002', value: 30 },\n  ],\n  scale: { enter: { type: 'identity' } },\n  transform: [{ type: 'stackEnter', by: ['color'] }],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'type',\n    series: 'type',\n    enterDuration: 1000,\n  },\n});\n```\n\nIntervals shows up series by series then group by group.\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { type: 'Apple', year: '2001', value: 260 },\n    { type: 'Orange', year: '2001', value: 100 },\n    { type: 'Banana', year: '2001', value: 90 },\n    { type: 'Apple', year: '2002', value: 210 },\n    { type: 'Orange', year: '2002', value: 150 },\n    { type: 'Banana', year: '2002', value: 30 },\n  ],\n  scale: { enter: { type: 'identity' } },\n  transform: [{ type: 'stackEnter', by: ['color', 'x'] }],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'type',\n    series: 'type',\n    enterDuration: 1000,\n  },\n});\n```\n\nIntervals shows up group by group and then series by series.\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { type: 'Apple', year: '2001', value: 260 },\n    { type: 'Orange', year: '2001', value: 100 },\n    { type: 'Banana', year: '2001', value: 90 },\n    { type: 'Apple', year: '2002', value: 210 },\n    { type: 'Orange', year: '2002', value: 150 },\n    { type: 'Banana', year: '2002', value: 30 },\n  ],\n  scale: { enter: { type: 'identity' } },\n  transform: [{ type: 'stackEnter', by: ['x', 'color'] }],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'type',\n    series: 'type',\n    enterDuration: 1000,\n  },\n});\n```\n\nStackEnter is useful for stack intervals.\n\n```js | dom\nG2.render({\n  type: 'interval',\n  data: [\n    { type: 'Apple', year: '2001', value: 260 },\n    { type: 'Orange', year: '2001', value: 100 },\n    { type: 'Banana', year: '2001', value: 90 },\n    { type: 'Apple', year: '2002', value: 210 },\n    { type: 'Orange', year: '2002', value: 150 },\n    { type: 'Banana', year: '2002', value: 30 },\n  ],\n  scale: { enter: { type: 'identity' } },\n  transform: [{ type: 'stackEnter', by: ['color'] }],\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: 'type',\n    enterDuration: 1000,\n  },\n});\n```\n\n## Custom\n\n```js | dom\n(() => {\n  const Rotate = (options) => {\n    return (shape, style, coordinate, theme) => {\n      const { height, width } = shape.getBoundingClientRect();\n      const { enter } = theme;\n      const keyframe = [\n        { transform: 'rotate(-90deg)' },\n        { transform: 'rotate(0deg)' },\n      ];\n      shape.setOrigin([width / 2, height / 2]);\n      return shape.animate(keyframe, { ...enter, ...style, ...options });\n    };\n  };\n  return G2.render({\n    type: 'interval',\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    scale: {\n      enterType: { type: 'identity' },\n    },\n    encode: {\n      x: 'genre',\n      y: 'sold',\n      color: 'genre',\n    },\n    animate: {\n      enter: {\n        type: Rotate, // Inline custom\n        duration: 3000,\n      },\n    },\n  });\n})();\n```\n\n```js\n(() => {\n  const Rotate = (options) => {\n    return (shape, style, coordinate, theme) => {\n      const { height, width } = shape.getBoundingClientRect();\n      const { enter } = theme;\n      const keyframes = [\n        { transform: 'rotate(-90deg)' },\n        { transform: 'rotate(0deg)' },\n      ];\n      shape.setOrigin([width / 2, height / 2]);\n      return shape.animate(keyframes, { ...enter, ...style, ...options });\n    };\n  };\n\n  const context = {\n    // Global custom\n    library: Object.assign(G2.createLibrary(), { 'animation.rotate': Rotate }),\n  };\n\n  return G2.render(\n    {\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      scale: {\n        enterType: { type: 'identity' },\n      },\n      encode: {\n        x: 'genre',\n        y: 'sold',\n        color: 'genre',\n      },\n      animate: {\n        enter: {\n          type: 'rotate',\n          duration: 3000,\n        },\n      },\n    },\n    context,\n  );\n})();\n```\n"}