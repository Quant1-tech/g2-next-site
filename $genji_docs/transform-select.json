{"markdown":"# Select\n\nThe select transform groups marks with specified channels, and filter index by specified selector for each series, say to pull a single or multiple values out of each series. The default channel for grouping is _series_, and the built-in selector is as followed:\n\n- _min_\n- _max_\n- _last_\n- _first_\n- a _function_\n\n## SelectMax\n\n```js\n(() => {\n  const chart = new G2.Chart();\n  const xysize = (node) =>\n    node\n      .encode('x', 'GDP')\n      .encode('y', 'LifeExpectancy')\n      .encode('size', 'Population'); // @todo Remove this for text.\n\n  chart.data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  });\n\n  chart\n    .point()\n    .call(xysize)\n    .encode('size', 'Population')\n    .encode('color', 'continent')\n    .scale('size', { type: 'log', range: [4, 20] })\n    .style('fillOpacity', 0.3)\n    .style('lineWidth', 1);\n\n  chart\n    .text()\n    .transform({ type: 'select', size: 'max' })\n    .call(xysize)\n    .encode('text', 'Country')\n    .style('fill', 'black')\n    .style('stroke', 'none')\n    .style('textAlign', 'center')\n    .style('textBaseline', 'middle');\n\n  return chart.render().node();\n})();\n```\n\n## SelectX\n\n```js\n(() => {\n  const chart = new G2.Chart({ paddingLeft: 60, paddingRight: 60 });\n  const xy = (node) =>\n    node.encode('x', (d) => new Date(d.Date)).encode('y', 'Close');\n\n  chart.data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/bmw-prod/6a9b4091-2fe1-4649-89f3-f9a211827811.json',\n  });\n\n  chart.line().call(xy).encode('color', 'Symbol').scale('x', { field: 'Date' });\n\n  chart\n    .text()\n    .transform({ type: 'selectX', selector: 'last' })\n    .call(xy)\n    .encode('series', 'Symbol')\n    .encode('text', 'Symbol')\n    .style('fontSize', 10)\n    .style('fontWeight', 'normal')\n    .style('fill', 'black')\n    .style('stroke', 'none');\n\n  return chart.render().node();\n})();\n```\n\n## SelectY\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/bmw-prod/ab55d10f-24da-465a-9eba-87ac4b7a83ec.json',\n  });\n\n  chart\n    .line()\n    .encode('x', (d) => new Date(d.Date))\n    .encode('y', 'Close');\n\n  chart\n    .lineY()\n    .transform({\n      type: 'selectY',\n      selector: (I, V) => {\n        const sum = V.reduce((s, v) => s + v);\n        const mean = sum / V.length;\n        let mi;\n        let mv = Infinity;\n        for (const i of I) {\n          const d = Math.abs(V[i] - mean);\n          if (d < mv) [mv, mi] = [d, i];\n        }\n        return [mi];\n      },\n    })\n    .encode('y', 'Close')\n    .style('stroke', 'black');\n\n  return chart.render().node();\n})();\n```\n"}