{"markdown":"# Keyframe\n\n> The flashing problem should be solved in the future.\n\nKeyframe composition provide a convent mechanism to author storytelling. It can be declared as simple as css animation, expect the object which applied animation change from a simple shape to a chart. It support following options for keyframe composition.\n\n- _duration_ - the duration for each frame\n- _iterationCount_ the play count for the animation, which can be a number of _infinite_\n- _direction_ - the play direction for the animation, which can be _normal_, _reverse_, _alternate_, _reverse-alternate_\n- _easing_ - the easing function for each frame\n\n## One to One\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  return G2.render({\n    type: 'keyframe',\n    children: [\n      {\n        type: 'point',\n        data,\n        scale: {\n          x: { guide: null },\n          y: { guide: null },\n        },\n        encode: {\n          key: 'genre',\n          size: 50,\n        },\n      },\n      {\n        type: 'point',\n        data,\n        scale: {\n          x: { guide: null, padding: 0.5 },\n          y: { guide: null },\n        },\n        encode: {\n          x: 'genre',\n          key: 'genre',\n          color: 'orange',\n          size: 50,\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'transpose' }],\n        encode: {\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'transpose' }, { type: 'polar' }],\n        encode: {\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'polar' }],\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n        style: {\n          radius: 10,\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'transpose' }],\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'orange',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        transform: [\n          {\n            type: 'sortBy',\n            fields: ['sold'],\n            order: 'DESC',\n          },\n        ],\n        coordinate: [{ type: 'transpose' }],\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: (d, i) => i,\n          key: 'genre',\n        },\n      },\n    ],\n  });\n})();\n```\n\n## Split and Merge\n\n```js\n(async () => {\n  const response = await fetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n  );\n  const data = await response.json();\n  return G2.render({\n    type: 'keyframe',\n    direction: 'alternate',\n    duration: 1000,\n    iterationCount: 4,\n    children: [\n      {\n        type: 'interval',\n        data,\n        transform: [{ type: 'groupX', y: 'mean' }],\n        encode: {\n          x: 'gender',\n          y: 'weight',\n          color: 'gender',\n          key: 'gender',\n        },\n      },\n      {\n        type: 'point',\n        data,\n        encode: {\n          x: 'height',\n          y: 'weight',\n          color: 'gender',\n          groupKey: 'gender',\n        },\n      },\n    ],\n  });\n})();\n```\n\n## Among Facets\n\n```js\n(async () => {\n  const response = await fetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/7fbb7084-cf34-4e7c-91b3-09e4748dc5e9.json',\n  );\n  const data = await response.json();\n  return G2.render({\n    type: 'keyframe',\n    direction: 'alternate',\n    iterationCount: 2,\n    children: [\n      {\n        type: 'rect',\n        paddingRight: 86,\n        paddingLeft: 54,\n        data,\n        encode: {\n          y: 'industry',\n        },\n        children: [\n          {\n            type: 'area',\n            class: 'area',\n            frame: false,\n            scale: { y: { facet: false }, x: { utc: true } },\n            encode: {\n              shape: 'smoothArea',\n              x: (d) => new Date(d.date),\n              y: 'unemployed',\n              color: 'industry',\n              key: 'industry',\n            },\n            style: { fillOpacity: 1 },\n            animate: { enter: { type: 'scaleInY' } },\n          },\n        ],\n      },\n      {\n        type: 'area',\n        class: 'area',\n        paddingLeft: 54,\n        paddingRight: 86,\n        data,\n        transform: [{ type: 'stackY', reverse: true }],\n        scale: { x: { utc: true } },\n        encode: {\n          shape: 'smoothArea',\n          x: (d) => new Date(d.date),\n          y: 'unemployed',\n          color: 'industry',\n          key: 'industry',\n        },\n        style: { fillOpacity: 1 },\n      },\n      {\n        type: 'area',\n        class: 'area',\n        paddingLeft: 54,\n        paddingRight: 86,\n        scale: { x: { utc: true } },\n        data,\n        encode: {\n          shape: 'smoothArea',\n          x: (d) => new Date(d.date),\n          y: 'unemployed',\n          color: 'industry',\n          key: 'industry',\n        },\n        style: { fillOpacity: 0.8 },\n      },\n    ],\n  });\n})();\n```\n\n## Unit Visualization\n\n```js\n(async () => {\n  const response = await fetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n  );\n  const data = await response.json();\n  return G2.render({\n    type: 'keyframe',\n    direction: 'alternate',\n    iterationCount: 4,\n    children: [\n      {\n        type: 'rect',\n        data,\n        encode: {\n          x: 'gender',\n        },\n        children: [\n          {\n            type: 'point',\n            class: 'point',\n            encode: {\n              color: 'gender',\n              key: (d) => `(${d.weight}, ${d.height})`,\n            },\n            adjust: { type: 'pack' },\n          },\n        ],\n      },\n      {\n        type: 'point',\n        class: 'point',\n        data,\n        encode: {\n          x: 'height',\n          y: 'weight',\n          color: 'gender',\n          key: (d) => `(${d.weight}, ${d.height})`,\n        },\n      },\n    ],\n  });\n})();\n```\n\n## Duration\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  return G2.render({\n    type: 'keyframe',\n    duration: 2000,\n    children: [\n      {\n        type: 'interval',\n        data,\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'polar' }],\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n    ],\n  });\n})();\n```\n\n## IterationCount\n\n### Number\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  return G2.render({\n    type: 'keyframe',\n    iterationCount: 2,\n    children: [\n      {\n        type: 'interval',\n        data,\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'polar' }],\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n    ],\n  });\n})();\n```\n\n### Infinite\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  return G2.render({\n    type: 'keyframe',\n    iterationCount: 'infinite',\n    children: [\n      {\n        type: 'interval',\n        data,\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'polar' }],\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n    ],\n  });\n})();\n```\n\n## Direction\n\n### Reverse\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  return G2.render({\n    type: 'keyframe',\n    direction: 'reverse',\n    children: [\n      {\n        type: 'interval',\n        data,\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'polar' }],\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n    ],\n  });\n})();\n```\n\n### Alternate\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  return G2.render({\n    type: 'keyframe',\n    direction: 'alternate',\n    iterationCount: 2,\n    children: [\n      {\n        type: 'point',\n        data,\n        scale: {\n          x: { guide: null, padding: 0.5 },\n          y: { guide: null },\n        },\n        encode: {\n          x: 'genre',\n          key: 'genre',\n          color: 'orange',\n          size: 50,\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'polar' }],\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n    ],\n  });\n})();\n```\n\n### Reverse Alternate\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  return G2.render({\n    type: 'keyframe',\n    direction: 'reverse-alternate',\n    iterationCount: 2,\n    children: [\n      {\n        type: 'point',\n        data,\n        scale: {\n          x: { guide: null, padding: 0.5 },\n          y: { guide: null },\n        },\n        encode: {\n          x: 'genre',\n          key: 'genre',\n          color: 'orange',\n          size: 50,\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n      {\n        type: 'interval',\n        data,\n        coordinate: [{ type: 'polar' }],\n        encode: {\n          x: 'genre',\n          y: 'sold',\n          color: 'genre',\n          key: 'genre',\n        },\n      },\n    ],\n  });\n})();\n```\n"}