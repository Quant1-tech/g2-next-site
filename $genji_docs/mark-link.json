{"markdown":"# Link\n\n## Basic Link\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .link()\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n    })\n    .encode('x', ['POP_1980', 'POP_2015'])\n    .encode('y', ['R90_10_1980', 'R90_10_2015'])\n    .encode('color', (d) => d.R90_10_2015 - d.R90_10_1980)\n    .scale('x', {\n      type: 'log',\n      guide: { formatter: (d) => `${d / 1000}k`, label: { autoHide: true } },\n    })\n    .scale('color', { guide: null })\n    .style('arrow', { size: 6 });\n\n  return chart.render().node();\n})();\n```\n\n## Graph Edge\n\n```js\n(() => {\n  const flatten = (data) => {\n    const root = d3.hierarchy(data);\n    return {\n      links: root.links(),\n      nodes: root.descendants(),\n    };\n  };\n  // @see https://bl.ocks.org/mbostock/1667139\n  // compute a static force layout\n  const layout = (data) => {\n    const { links, nodes } = data;\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        'link',\n        d3\n          .forceLink(links)\n          .id((d) => d.id)\n          .distance(0)\n          .strength(1),\n      )\n      .force('charge', d3.forceManyBody().strength(-50))\n      .force('x', d3.forceX())\n      .force('y', d3.forceY())\n      .stop();\n    const n = Math.ceil(\n      Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay()),\n    );\n    for (let i = 0; i < n; ++i) simulation.tick();\n    return data;\n  };\n  const links = (d) => d.links;\n  const nodes = (d) => d.nodes;\n  const chart = new G2.Chart({\n    width: 640,\n    height: 640,\n  });\n\n  chart\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/233673d6-9c84-4ba2-98be-992fb1b34593.json',\n    })\n    .transform({ type: 'connector', callback: flatten })\n    .transform({ type: 'connector', callback: layout });\n\n  chart\n    .link()\n    .transform({ type: 'connector', callback: links })\n    .encode('x', [(d) => d.source.x, (d) => d.target.x])\n    .encode('y', [(d) => d.source.y, (d) => d.target.y])\n    .scale('x', { guide: null })\n    .scale('y', { guide: null })\n    .style('stroke', '#ddd');\n\n  chart\n    .point()\n    .transform({ type: 'connector', callback: nodes })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('size', 10)\n    .encode('color', (d) => d.data.type)\n    .encode('title', (d) => d.data.type)\n    .encode('tooltip', (d) => d.data.name);\n\n  return chart.render().node();\n})();\n```\n\n## Dependance\n\n```js | dom \"pin: false\"\nd3 = (async () => {\n  const { hierarchy } = await genji.require('d3-hierarchy');\n  const { forceSimulation, forceLink, forceManyBody, forceX, forceY } =\n    await genji.require('d3-force');\n  return {\n    hierarchy,\n    forceSimulation,\n    forceLink,\n    forceManyBody,\n    forceX,\n    forceY,\n  };\n})();\n```\n"}