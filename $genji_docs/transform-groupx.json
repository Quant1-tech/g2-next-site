{"markdown":"# GroupX\n\n**GroupX** 将标识按照 x 通道的值进行分组，然后对每组标识的通道值按照指定的聚合函数进行聚合。支持的聚合函数如下：\n\n- _count_ - 返回数量\n- _sum_ - 返回总和\n- _min_ - 返回最小值\n- _max_ - 返回最大值\n- _first_ - 返回第一值\n- _last_ - 返回最后一个值\n- _mean_ - 返回平均值\n- _median_ - 返回中位数\n- _a function_ - 聚合函数\n\n## 开始\n\n```js\n(() => {\n  const chart = new G2.Chart({ paddingLeft: 60 });\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n    })\n    // 指定 y 通道是每一组的数量\n    .transform({ type: 'groupX', y: 'count' })\n    .encode('x', 'clarity')\n    .encode('color', 'clarity')\n    .axis('y', { tickFormatter: '~s' });\n\n  return chart.render().node();\n})();\n```\n\n## 选项\n\n| 参数      | 说明                     | 类型                                                                            | 默认值 |\n| --------- | ------------------------ | ------------------------------------------------------------------------------- | ------ |\n| [channel] | 指定每一个通道的聚合函数 | `'min' \\| 'max' \\| 'first' \\| 'last' \\| 'mean' \\| 'median' \\| 'sum' \\| Reducer` | -      |\n\n## 案例\n\n这里通过如下的珠宝数据来看看不同的聚合的使用方式和效果。\n\n```js | table \"pin: false\"\ndata = genji.fetchJSON(\n  'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n);\n```\n\n```js | select \"pin: false; options: { labels: ['first', 'last', 'min', 'max', 'mean', 'median', 'sum', ], values: ['first', 'last', 'min', 'max', 'mean', 'median', 'sum'] }; \"\nreducer = 'first';\n```\n\n```js\n(() => {\n  const chart = new G2.Chart({ paddingLeft: 60 });\n\n  chart\n    .interval()\n    .data(data)\n    .transform({\n      type: 'groupX',\n      y: reducer,\n    })\n    .encode('x', 'clarity')\n    .encode('y', 'price')\n    .encode('color', 'clarity')\n    .axis('y', { tickFormatter: '~s' });\n\n  return chart.render().node();\n})();\n```\n\n在上面的基础上我们还可以使用 **SortX** 转换将聚合后的 Interval 排序。\n\n```js\n(() => {\n  const chart = new G2.Chart({ paddingLeft: 60 });\n\n  chart\n    .interval()\n    .data(data)\n    .transform({ type: 'groupX', y: reducer })\n    .transform({ type: 'sortX' })\n    .encode('x', 'clarity')\n    .encode('y', 'price')\n    .encode('color', 'clarity')\n    .axis('y', { tickFormatter: '~s' });\n\n  return chart.render().node();\n})();\n```\n"}