{"markdown":"# Normalize\n\nGroup marks into series by specified channels, and then transform each series's value, say to transform them relative to some basis to apply a moving average. The default basis is `max` and the marks are grouped by `x` channel by default. The built-in basis is as followed:\n\n- min\n- max\n- first\n- last\n- mean\n- extent\n- median\n- sum\n- deviation\n\n## Normalized Stacked Interval\n\n```js\nG2.render({\n  type: 'interval',\n  data: [\n    { city: 'London', month: 'Jan.', rainfall: 18.9 },\n    { city: 'London', month: 'Feb.', rainfall: 28.8 },\n    { city: 'London', month: 'Mar.', rainfall: 39.3 },\n    { city: 'London', month: 'Apr.', rainfall: 81.4 },\n    { city: 'London', month: 'May', rainfall: 47 },\n    { city: 'London', month: 'Jun.', rainfall: 20.3 },\n    { city: 'London', month: 'Jul.', rainfall: 24 },\n    { city: 'London', month: 'Aug.', rainfall: 35.6 },\n    { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n    { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n    { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n    { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n    { city: 'Berlin', month: 'May', rainfall: 52.6 },\n    { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n    { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n    { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n  ],\n  transform: [{ type: 'normalizeY' }],\n  encode: {\n    x: 'month',\n    y: 'rainfall',\n    color: 'city',\n  },\n});\n```\n\n## Normalized Stacked Dodged Interval\n\nOptions `groupBy` can be specified as an array.\n\n```js\nG2.render({\n  type: 'interval',\n  transform: [\n    {\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/antfincdn/mor%26R5yBI9/stack-group-column.json',\n    },\n    { type: 'normalizeY', groupBy: ['x', 'series'] },\n  ],\n  scale: { y: { field: 'order' } },\n  encode: {\n    x: 'product_type',\n    y: 'order_amt',\n    color: 'product_sub_type',\n    series: 'sex',\n  },\n});\n```\n\n## Normalized Stacked Area\n\n```js\nG2.render({\n  type: 'area',\n  data: [\n    { year: '1991', sale: 15468, type: '办公用品' },\n    { year: '1992', sale: 16100, type: '办公用品' },\n    { year: '1993', sale: 15900, type: '办公用品' },\n    { year: '1994', sale: 17409, type: '办公用品' },\n    { year: '1995', sale: 17000, type: '办公用品' },\n    { year: '1996', sale: 31056, type: '办公用品' },\n    { year: '1997', sale: 31982, type: '办公用品' },\n    { year: '1998', sale: 32040, type: '办公用品' },\n    { year: '1999', sale: 33233, type: '办公用品' },\n    { year: '1991', sale: 11468, type: '食品' },\n    { year: '1992', sale: 16100, type: '食品' },\n    { year: '1993', sale: 19900, type: '食品' },\n    { year: '1994', sale: 17409, type: '食品' },\n    { year: '1995', sale: 20000, type: '食品' },\n    { year: '1996', sale: 18056, type: '食品' },\n    { year: '1997', sale: 28982, type: '食品' },\n    { year: '1998', sale: 32040, type: '食品' },\n    { year: '1999', sale: 40233, type: '食品' },\n  ],\n  transform: [{ type: 'stackY' }, { type: 'normalizeY' }],\n  encode: {\n    x: 'year',\n    y: 'sale',\n    color: 'type',\n    shape: 'smoothArea',\n  },\n});\n```\n\n## Normalized Line\n\nSpecifies `basis` to `first`.\n\n```js\nG2.render({\n  type: 'line',\n  transform: [\n    {\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/6a9b4091-2fe1-4649-89f3-f9a211827811.json',\n    },\n    {\n      type: 'normalizeY',\n      groupBy: 'series',\n      basis: 'first',\n    },\n  ],\n  scale: { x: { field: 'Date' } },\n  encode: {\n    x: (d) => new Date(d.Date),\n    y: 'Close',\n    color: 'Symbol',\n  },\n});\n```\n"}