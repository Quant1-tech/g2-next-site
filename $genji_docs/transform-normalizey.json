{"markdown":"# NormalizeY\n\n**NormalizeY** 转换会将标识按照指定的通道进行分组，然后对每一个系列的 y 通道的值进行转换。可以理解为对这些值相对某个基准进行归一化。默认的基准是 `max`，同时标识会按照 x 通道的值进行分组。内置的基准如下：\n\n- _min_ - 以最小值为基准进行归一化\n- _max_ - 以最大值为基准进行归一化\n- _first_ - 以第一个值为基准进行归一化\n- _last_ - 以第最后一个值为基准进行归一化\n- _mean_ - 以平均值为基准进行归一化\n- _median_ - 以中位数为基准进行归一化\n- _sum_ - 以总和为基准进行归一化\n- _deviation_ - 以离差为基准进行归一化\n\n<!-- The **NormalizeY** transform group marks into series by specified channels, and then transform each series's value, say to transform them relative to some basis to apply a moving average. The default basis is `max` and the marks are grouped by `x` channel by default. The built-in basis is as followed:\n\n- min\n- max\n- first\n- last\n- mean\n- extent\n- median\n- sum\n- deviation -->\n\n## 开始\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    paddingLeft: 60,\n  });\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .transform({ type: 'stackY' })\n    // 指定 normalizeY 转换\n    .transform({ type: 'normalizeY' })\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city')\n    .axis('y', { tickFormatter: '.0%' });\n\n  return chart.render().node();\n})();\n```\n\n## 选项\n\n| 参数    | 说明               | 类型                                                                                | 默认值 |\n| ------- | ------------------ | ----------------------------------------------------------------------------------- | ------ |\n| groupBy | 根据指定的通道分组 | `string \\| string[]`                                                                | `x`    |\n| basis   | 指定归一化的基准   | `'min' \\| 'max' \\| 'first' \\| 'last' \\| 'mean' \\| 'median' \\| 'sum' \\| 'deviation'` | `max`  |\n\n## 案例\n\n### 归一化折线图\n\n这里通过折线图来看看认识不同的基准。\n\n```js | select \"pin: false; options: { labels: ['first', 'last', 'min', 'max', 'mean', 'median', 'sum', 'deviation', 'none'], values: ['first', 'last', 'min', 'max', 'mean', 'median', 'sum', 'deviation', 'none'] }; \"\nbasis = 'first';\n```\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/6a9b4091-2fe1-4649-89f3-f9a211827811.json',\n    })\n    .call((node) =>\n      basis === 'none'\n        ? node\n        : node.transform({\n            type: 'normalizeY',\n            groupBy: 'series',\n            basis: basis,\n          }),\n    )\n    .encode('x', (d) => new Date(d.Date))\n    .encode('y', 'Close')\n    .encode('color', 'Symbol')\n    .axis('x', { title: 'Date' });\n\n  return chart.render().node();\n})();\n```\n\n### 归一化堆叠面积图\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .area()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/e58c9758-0a09-4527-aa90-fbf175b45925.json',\n    })\n    .transform({ type: 'stackY' })\n    .transform({ type: 'normalizeY' })\n    .encode('x', (d) => new Date(d.date))\n    .encode('y', 'unemployed')\n    .encode('color', 'industry')\n    .encode('shape', 'smooth')\n    .axis('x', { title: 'Date' })\n    .axis('color', { size: 72, autoWrap: true, maxRows: 3, cols: 6 });\n\n  return chart.render().node();\n})();\n```\n"}