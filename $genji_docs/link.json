{"markdown":"# Link\n\n## Basic Link\n\n```js\nG2.render({\n  type: 'link',\n  transform: [\n    {\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n    },\n  ],\n  encode: {\n    x: ['POP_1980', 'POP_2015'],\n    y: ['R90_10_1980', 'R90_10_2015'],\n    color: (d) => d.R90_10_2015 - d.R90_10_1980,\n  },\n  scale: {\n    x: {\n      type: 'log',\n      guide: { formatter: (d) => `${d / 1000}k`, label: { autoHide: true } },\n    },\n    color: { guide: null },\n  },\n  style: {\n    arrow: { size: 6 },\n  },\n});\n```\n\n## Graph Edge\n\n```js\n(() => {\n  const flatten = (data) => {\n    const root = d3.hierarchy(data);\n    return {\n      links: root.links(),\n      nodes: root.descendants(),\n    };\n  };\n  // @see https://bl.ocks.org/mbostock/1667139\n  // compute a static force layout\n  const layout = (data) => {\n    const { links, nodes } = data;\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        'link',\n        d3\n          .forceLink(links)\n          .id((d) => d.id)\n          .distance(0)\n          .strength(1),\n      )\n      .force('charge', d3.forceManyBody().strength(-50))\n      .force('x', d3.forceX())\n      .force('y', d3.forceY())\n      .stop();\n    const n = Math.ceil(\n      Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay()),\n    );\n    for (let i = 0; i < n; ++i) simulation.tick();\n    return data;\n  };\n  const links = (d) => d.links;\n  const nodes = (d) => d.nodes;\n  return G2.render({\n    type: 'view',\n    transform: [\n      {\n        type: 'fetch',\n        url: 'https://gw.alipayobjects.com/os/bmw-prod/233673d6-9c84-4ba2-98be-992fb1b34593.json',\n      },\n      { type: 'connector', callback: flatten },\n      { type: 'connector', callback: layout },\n    ],\n    children: [\n      {\n        type: 'link',\n        transform: [{ type: 'connector', callback: links }],\n        encode: {\n          x: (d) => d.source.x,\n          y: (d) => d.source.y,\n          x1: (d) => d.target.x,\n          y1: (d) => d.target.y,\n        },\n        scale: {\n          x: { guide: null },\n          y: { guide: null },\n        },\n        style: {\n          stroke: '#ddd',\n        },\n      },\n      {\n        type: 'point',\n        transform: [{ type: 'connector', callback: nodes }],\n        scale: {\n          tooltip: { field: '名字' },\n        },\n        encode: {\n          x: 'x',\n          y: 'y',\n          size: 10,\n          color: (d) => d.data.type,\n          title: (d) => d.data.type,\n          tooltip: (d) => d.data.name,\n        },\n      },\n    ],\n  });\n})();\n```\n\n## Dependance\n\n```js | dom \"pin: false\"\nd3 = (async () => {\n  const { hierarchy } = await genji.require('d3-hierarchy');\n  const { forceSimulation, forceLink, forceManyBody, forceX, forceY } =\n    await genji.require('d3-force');\n  return {\n    hierarchy,\n    forceSimulation,\n    forceLink,\n    forceManyBody,\n    forceX,\n    forceY,\n  };\n})();\n```\n"}