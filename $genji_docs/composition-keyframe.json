{"markdown":"# Keyframe\n\n> The flashing problem should be solved in the future.\n\nKeyframe composition provide a convent mechanism to author storytelling. It can be declared as simple as css animation, expect the object which applied animation change from a simple shape to a chart. It support following options for keyframe composition.\n\n- _duration_ - the duration for each frame\n- _iterationCount_ the play count for the animation, which can be a number of _infinite_\n- _direction_ - the play direction for the animation, which can be _normal_, _reverse_, _alternate_, _reverse-alternate_\n- _easing_ - the easing function for each frame\n\n## One to One\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  const chart = new G2.Chart();\n  const keyframe = chart.keyframe();\n\n  keyframe\n    .point()\n    .data(data)\n    .encode('key', 'genre')\n    .encode('size', 50)\n    .scale('x', { guide: null })\n    .scale('y', { guide: null });\n\n  keyframe\n    .point()\n    .data(data)\n    .encode('x', 'genre')\n    .encode('key', 'genre')\n    .encode('color', 'orange')\n    .encode('size', 50)\n    .scale('x', { guide: null, padding: 0.5 })\n    .scale('y', { guide: null });\n\n  keyframe\n    .interval()\n    .data(data)\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre');\n\n  keyframe\n    .interval()\n    .data(data)\n    .coordinate({ type: 'transpose' })\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre')\n    .scale('x', { guide: null })\n    .scale('y', { guide: null });\n\n  keyframe\n    .interval()\n    .data(data)\n    .coordinate({ type: 'transpose' })\n    .coordinate({ type: 'polar' })\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre');\n\n  keyframe\n    .interval()\n    .data(data)\n    .coordinate({ type: 'polar' })\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre')\n    .style('radius', 10);\n\n  keyframe\n    .interval()\n    .data(data)\n    .coordinate({ type: 'transpose' })\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre');\n\n  keyframe\n    .interval()\n    .paddingLeft(70)\n    .data(data)\n    .transform({ type: 'sortBy', fields: ['sold'], order: 'DESC' })\n    .coordinate({ type: 'transpose' })\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', (d, i) => i)\n    .encode('key', 'genre');\n\n  return chart.render().node();\n})();\n```\n\n## Split and Merge\n\n```js\n(async () => {\n  const response = await fetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n  );\n  const data = await response.json();\n  const chart = new G2.Chart();\n\n  const keyframe = chart\n    .keyframe()\n    .direction('alternate')\n    .duration(1000)\n    .iterationCount(4);\n\n  keyframe\n    .interval()\n    .data(data)\n    .transform({ type: 'groupX', y: 'mean' })\n    .encode('x', 'gender')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('key', 'gender');\n\n  keyframe\n    .point()\n    .data(data)\n    .encode('x', 'height')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('groupKey', 'gender');\n\n  return chart.render().node();\n})();\n```\n\n## Among Facets\n\n```js\n(async () => {\n  const response = await fetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/7fbb7084-cf34-4e7c-91b3-09e4748dc5e9.json',\n  );\n  const data = await response.json();\n  const chart = new G2.Chart();\n  const padding = (node) => node.paddingRight(86).paddingLeft(54);\n  const encode = (node) =>\n    node\n      .encode('shape', 'smoothArea')\n      .encode('x', (d) => new Date(d.date))\n      .encode('y', 'unemployed')\n      .encode('color', 'industry')\n      .encode('key', 'industry');\n  const utcX = (node) => node.scale('x', { utc: true });\n\n  const keyframe = chart.keyframe().direction('alternate').iterationCount('2');\n\n  keyframe\n    .rect()\n    .call(padding)\n    .data(data)\n    .encode('y', 'industry')\n    .area()\n    .class('area')\n    .frame(false)\n    .call(encode)\n    .call(utcX)\n    .scale('y', { facet: false })\n    .style('fillOpacity', 1)\n    .animate('enter', { type: 'scaleInY' });\n\n  keyframe\n    .area()\n    .call(padding)\n    .data(data)\n    .class('area')\n    .transform({ type: 'stackY', reverse: true })\n    .call(encode)\n    .call(utcX)\n    .style('fillOpacity', 1);\n\n  keyframe\n    .area()\n    .call(padding)\n    .data(data)\n    .class('area')\n    .call(encode)\n    .call(utcX)\n    .style('fillOpacity', 0.8);\n\n  return chart.render().node();\n})();\n```\n\n## Unit Visualization\n\n```js\n(async () => {\n  const response = await fetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n  );\n  const data = await response.json();\n  const chart = new G2.Chart();\n  const key = (d) => `(${d.weight}, ${d.height})`;\n  const keyframe = chart.keyframe().direction('alternate').iterationCount(4);\n\n  keyframe\n    .rect()\n    .data(data)\n    .encode('x', 'gender')\n    .point()\n    .class('point')\n    .adjust({ type: 'pack' })\n    .encode('color', 'gender')\n    .encode('key', key);\n\n  keyframe\n    .point()\n    .class('point')\n    .data(data)\n    .encode('x', 'height')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('key', key);\n\n  return chart.render().node();\n})();\n```\n\n## Duration\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  const chart = new G2.Chart();\n\n  const keyframe = chart.keyframe().duration(2000);\n\n  keyframe\n    .interval()\n    .data(data)\n    .key('key')\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre');\n\n  keyframe\n    .interval()\n    .coordinate({ type: 'polar' })\n    .data(data)\n    .key('key')\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre')\n    .scale('x', { guide: null })\n    .scale('y', { guide: null });\n\n  return chart.render().node();\n})();\n```\n\n## IterationCount\n\n### Number\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  const chart = new G2.Chart();\n\n  const keyframe = chart.keyframe().iterationCount(2);\n\n  keyframe\n    .interval()\n    .data(data)\n    .key('key')\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre');\n\n  keyframe\n    .interval()\n    .coordinate({ type: 'polar' })\n    .data(data)\n    .key('key')\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre')\n    .scale('x', { guide: null })\n    .scale('y', { guide: null });\n\n  return chart.render().node();\n})();\n```\n\n### Infinite\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  const chart = new G2.Chart();\n\n  const keyframe = chart.keyframe().iterationCount('infinite');\n\n  keyframe\n    .interval()\n    .data(data)\n    .key('key')\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre');\n\n  keyframe\n    .interval()\n    .coordinate({ type: 'polar' })\n    .data(data)\n    .key('key')\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre')\n    .scale('x', { guide: null })\n    .scale('y', { guide: null });\n\n  return chart.render().node();\n})();\n```\n\n## Direction\n\n### Reverse\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  const chart = new G2.Chart();\n\n  const keyframe = chart.keyframe().direction('reverse');\n\n  keyframe\n    .interval()\n    .data(data)\n    .key('key')\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre');\n\n  keyframe\n    .interval()\n    .coordinate({ type: 'polar' })\n    .data(data)\n    .key('key')\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre')\n    .scale('x', { guide: null })\n    .scale('y', { guide: null });\n\n  return chart.render().node();\n})();\n```\n\n### Alternate\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  const chart = new G2.Chart();\n  const keyframe = chart.keyframe().direction('alternate').iterationCount(2);\n\n  keyframe\n    .point()\n    .data(data)\n    .encode('x', 'genre')\n    .encode('key', 'genre')\n    .encode('color', 'orange')\n    .encode('size', 50)\n    .scale('x', { guide: null, padding: 0.5 })\n    .scale('y', { guide: null });\n\n  keyframe\n    .interval()\n    .data(data)\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('key', 'genre')\n    .encode('color', 'orange');\n\n  keyframe\n    .interval()\n    .data(data)\n    .coordinate([{ type: 'polar' }])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre')\n    .scale('x', { guide: null })\n    .scale('y', { guide: null });\n\n  return chart.render().node();\n})();\n```\n\n### Reverse Alternate\n\n```js\n(() => {\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n  const chart = new G2.Chart();\n  const keyframe = chart\n    .keyframe()\n    .direction('reverse-alternate')\n    .iterationCount(2);\n\n  keyframe\n    .point()\n    .data(data)\n    .encode('x', 'genre')\n    .encode('key', 'genre')\n    .encode('color', 'orange')\n    .encode('size', 50)\n    .scale('x', { guide: null, padding: 0.5 })\n    .scale('y', { guide: null });\n\n  keyframe\n    .interval()\n    .data(data)\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('key', 'genre')\n    .encode('color', 'orange');\n\n  keyframe\n    .interval()\n    .data(data)\n    .coordinate([{ type: 'polar' }])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('key', 'genre')\n    .scale('x', { guide: null })\n    .scale('y', { guide: null });\n\n  return chart.render().node();\n})();\n```\n"}