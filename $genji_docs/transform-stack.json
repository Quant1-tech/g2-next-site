{"markdown":"# Stack\n\nThe **stack** transform group marks into series by color or series channel, and then produce new y channel for each series by specified order, say to form vertical \"stacks\" by specified channels. The built-in order is as followed:\n\n- _sum_ - order stacks by ascending total value of corresponding series\n- _value_ - order stacks by ascending values of y channel\n- _series_ - order stacks by nature alphabetical order of series or color channel\n- _maxIndex_ - order stacks by the index of their max value of corresponding series\n- _a function_ - order stacks by the specified function of data\n- _an array_ - order stacks by the specified array of fields\n- _null_ - respect input order\n\nThe _reverse_ option reverse any of the above orders. And the _y_ option control wether using the ceil (_y_) or floor (_y1_) of stacked y channel as the new y channel.\n\n## Stacked Interval\n\n```js\n(() => {\n  const chart = new G2.Chart({});\n\n  chart\n    .interval()\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/0afdce89-c103-479d-91f4-6cf604bcf200.json',\n    })\n    .encode('x', 'date')\n    .encode('y', 'deaths')\n    .encode('color', 'cause')\n    .scale('x', {\n      guide: {\n        formatter: (d) =>\n          `${new Date(d).toLocaleString('en', { month: 'narrow' })}`,\n      },\n    })\n    .scale('y', { guide: { formatter: (d) => `${+d / 1000}k` } });\n\n  return chart.render().node();\n})();\n```\n\n## Stacked Area\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .area()\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/e58c9758-0a09-4527-aa90-fbf175b45925.json',\n    })\n    .transform({ type: 'stackY', orderBy: 'series' })\n    .encode('x', (d) => new Date(d.date))\n    .encode('y', 'unemployed')\n    .encode('color', 'industry')\n    .encode('shape', 'smoothArea')\n    .scale('x', { field: 'Date', utc: true })\n    .scale('y', { guide: { formatter: (d) => `${+d / 1000}k` } })\n    .scale('color', {\n      guide: { size: 72, autoWrap: true, maxRows: 3, cols: 6 },\n    });\n\n  return chart.render().node();\n})();\n```\n\n## Order By Sum\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .area()\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/e58c9758-0a09-4527-aa90-fbf175b45925.json',\n    })\n    .transform({ type: 'stackY', orderBy: 'sum' })\n    .encode('x', (d) => new Date(d.date))\n    .encode('y', 'unemployed')\n    .encode('color', 'industry')\n    .encode('shape', 'smoothArea')\n    .scale('x', { field: 'Date', utc: true })\n    .scale('y', { guide: { formatter: (d) => `${+d / 1000}k` } })\n    .scale('color', {\n      guide: { size: 72, autoWrap: true, maxRows: 3, cols: 6 },\n    });\n\n  return chart.render().node();\n})();\n```\n\n## Order By Value\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .area()\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/e58c9758-0a09-4527-aa90-fbf175b45925.json',\n    })\n    .transform({ type: 'stackY', orderBy: 'value' })\n    .encode('x', (d) => new Date(d.date))\n    .encode('y', 'unemployed')\n    .encode('color', 'industry')\n    .encode('shape', 'smoothArea')\n    .scale('x', { field: 'Date', utc: true })\n    .scale('y', { guide: { formatter: (d) => `${+d / 1000}k` } })\n    .scale('color', {\n      guide: { size: 72, autoWrap: true, maxRows: 3, cols: 6 },\n    });\n\n  return chart.render().node();\n})();\n```\n\nReplace _orderBy_ option with `d => d.unemployed` (function order) or `['unemployed']` (fields order)will result in same output.\n\n## Order By Max Index\n\n```js\n(() => {\n  const chart = new G2.Chart();\n  const xy = (node) =>\n    node\n      .encode('x', (d) => new Date(d.year))\n      .encode('y', 'revenue')\n      .encode('series', 'format');\n\n  chart.transform({\n    type: 'fetch',\n    url: 'https://gw.alipayobjects.com/os/bmw-prod/f38a8ad0-6e1f-4bb3-894c-7db50781fdec.json',\n  });\n\n  chart\n    .area()\n    .transform({ type: 'stackY', orderBy: 'maxIndex', reverse: true })\n    .call(xy)\n    .encode('color', 'group')\n    .encode('shape', 'smoothArea')\n    .scale('y', { guide: { formatter: (d) => `${+d / 1000}k` } });\n\n  chart\n    .line()\n    .transform({ type: 'stackY', orderBy: 'maxIndex', reverse: true, y: 'y1' })\n    .call(xy)\n    .encode('shape', 'smooth')\n    .style('stroke', 'white');\n\n  return chart.render().node();\n})();\n```\n\n## Stacked Point\n\n```js\n(() => {\n  const chart = new G2.Chart({ height: 360 });\n\n  chart\n    .point()\n    .transform({\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/88c601cd-c1ff-4c9b-90d5-740d0b710b7e.json',\n    })\n    .transform({ type: 'stackY' })\n    .encode('x', (d) => 2021 - d.birth)\n    .encode('y', (d) => (d.gender === 'M' ? 1 : -1))\n    .encode('color', 'gender')\n    .scale('color', { field: 'Gender' })\n    .scale('x', { field: 'Age →', nice: true })\n    .scale('y', {\n      field: '← Women · Men →',\n      guide: {\n        formatter: (d) => `${Math.abs(+d)}`,\n        title: { style: { textAlign: 'center' } },\n      },\n    });\n\n  chart.annotationLineY().data([0]).encode('y', 0).style('stroke', 'black');\n\n  return chart.render().node();\n})();\n```\n"}