{"markdown":"# Graph\n\n图数据是利用`实体`和`关系`的方式去描述世界，关系图（Graph）是对图数据的可视化。G2 通过多种标记组合的方式去实现图可视化，主要用到的标记包括：`Point`、`Polygon`、`Link`，这些标记提供了多种多样的图形让我们配合一些图布局算法，绘制出不同样式的关系图。\n\n<img alt=\"graph\" style=\"max-height: 150px\" src=\"https://gw.alipayobjects.com/zos/antfincdn/ue44OyTv9L/image.png\" />\n\n## 使用方法\n\n我们先准备两份数据，后面的图都会用到。\n\n```js | dom \"pin: false\"\nflare = genji.fetchJSON(\n  'https://gw.alipayobjects.com/os/antfincdn/FouG0KJrBc/flare.json',\n);\n```\n\n```js | dom \"pin: false\"\nmiserables = genji.fetchJSON(\n  'https://gw.alipayobjects.com/os/antfincdn/agVao%26jU5l/miserables.json',\n);\n```\n\n### 树图（Tree）\n\n在树形结构中，树根结点没有前驱结点，其余每个结点有且只有一个前驱结点。 叶子结点没有后续结点，其余每个结点的后续节点数可以是一个也可以是多个。\n\n```js | radio \"options: { labels: ['polar', 'rect'], values: ['polar', 'transpose'] }; pin: false\"\ntreeCoordinate = 'polar';\n```\n\n```js | radio \"options: { labels: ['smooth', 'vhv'], values: ['smooth', 'vhv'] }; pin: false\"\ntreeShape = 'smooth';\n```\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 600,\n    height: 400,\n  });\n\n  chart.data({\n    value: flare,\n    transform: [{ type: 'tree', y: 0.3 }],\n  });\n\n  chart.coordinate({ type: treeCoordinate });\n\n  chart\n    .link()\n    .data({\n      transform: [{ type: 'custom', callback: (v) => v.edges }],\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('shape', treeShape)\n    .axis(false)\n    .scale('y', { domain: [0, 1] })\n    .style('stroke', 'grey');\n\n  chart\n    .point()\n    .data({\n      transform: [{ type: 'custom', callback: (v) => v.nodes }],\n    })\n    .encode('shape', 'point')\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('size', 2);\n\n  return chart.render().node();\n})();\n```\n\n### 桑基图（Sankey）\n\n桑基图 (Sankey Diagram)，是一种特定类型的流图，用于描述一组值到另一组值的流向。桑基图的特点如下：\n\n- 起始流量和结束流量相同，所有主支宽度的总和与所有分出去的分支宽度总和相等，保持能量的平衡；\n- 在内部，不同的线条代表了不同的流量分流情况，它的宽度成比例地显示此分支占有的流量；\n- 节点不同的宽度代表了特定状态下的流量大小。\n\n桑基图通常应用于能源、材料成分、金融等数据的可视化分析。\n\n```js | dom \"pin: false\"\nsankeyData = {\n  nodes: [\n    {\n      name: '首次打开',\n    },\n    {\n      name: '结果页',\n    },\n    {\n      name: '验证页',\n    },\n    {\n      name: '我的',\n    },\n    {\n      name: '朋友',\n    },\n    {\n      name: '其他来源',\n    },\n    {\n      name: '首页 UV',\n    },\n    {\n      name: '我的',\n    },\n    {\n      name: '扫一扫',\n    },\n    {\n      name: '服务',\n    },\n    {\n      name: '蚂蚁森林',\n    },\n    {\n      name: '跳失',\n    },\n    {\n      name: '借呗',\n    },\n    {\n      name: '花呗',\n    },\n    {\n      name: '其他流向',\n    },\n  ],\n  links: [\n    {\n      source: 0,\n      target: 6,\n      value: 160,\n    },\n    {\n      source: 1,\n      target: 6,\n      value: 40,\n    },\n    {\n      source: 2,\n      target: 6,\n      value: 10,\n    },\n    {\n      source: 3,\n      target: 6,\n      value: 10,\n    },\n    {\n      source: 4,\n      target: 6,\n      value: 8,\n    },\n    {\n      source: 5,\n      target: 6,\n      value: 27,\n    },\n    {\n      source: 6,\n      target: 7,\n      value: 30,\n    },\n    {\n      source: 6,\n      target: 8,\n      value: 40,\n    },\n    {\n      source: 6,\n      target: 9,\n      value: 35,\n    },\n    {\n      source: 6,\n      target: 10,\n      value: 25,\n    },\n    {\n      source: 6,\n      target: 11,\n      value: 10,\n    },\n    {\n      source: 6,\n      target: 12,\n      value: 30,\n    },\n    {\n      source: 6,\n      target: 13,\n      value: 40,\n    },\n    {\n      source: 6,\n      target: 14,\n      value: 45,\n    },\n  ],\n};\n```\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 600,\n    height: 400,\n    paddingBottom: 5,\n    paddingTop: 5,\n    paddingLeft: 5,\n    paddingRight: 5,\n  });\n\n  chart.data({\n    value: sankeyData,\n    transform: [{ type: 'sankey' }],\n  });\n\n  // edge\n  chart\n    .polygon()\n    .data({\n      transform: [{ type: 'custom', callback: (v) => v.links }],\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('color', (d) => d.source.name)\n    .encode('shape', 'ribbon')\n    .axis(false)\n    .legend(false)\n    .style('fillOpacity', 0.5)\n    .style('stroke', null);\n\n  // node\n  chart\n    .polygon()\n    .data({\n      transform: [{ type: 'custom', callback: (v) => v.nodes }],\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('color', 'name')\n    .encode('shape', 'polygon')\n    .axis(false)\n    .legend(false);\n\n  return chart.render().node();\n})();\n```\n\n### 和弦图（Chord）\n\n和弦图是一种显示矩阵中数据间相互关系的可视化方法，节点数据沿圆周径向排列，节点之间使用带权重（有宽度）的弧线链接。\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 600,\n    height: 400,\n  });\n\n  chart.data({\n    value: miserables,\n    transform: [{ type: 'arc', y: 1, weight: true }],\n  });\n\n  chart.coordinate({ type: 'polar' });\n\n  chart\n    .polygon()\n    .data({\n      transform: [{ type: 'custom', callback: (v) => v.edges }],\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('color', 'source')\n    .encode('shape', 'ribbon')\n    .axis(false)\n    .legend(false)\n    .scale('x', { domain: [0, 1] })\n    .scale('y', { domain: [0, 1] })\n    .scale('color', { type: 'ordinal' })\n    .style('opacity', 0.5);\n\n  chart\n    .polygon()\n    .data({\n      transform: [{ type: 'custom', callback: (v) => v.nodes }],\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('size', 'value')\n    .encode('color', 'name')\n    .encode('shape', 'polygon')\n    .scale('x', { domain: [0, 1] })\n    .scale('y', { domain: [0, 1] })\n    .scale('color', { type: 'ordinal' });\n\n  return chart.render().node();\n})();\n```\n\n### 弧线图（Arc Diagram）\n\n弧长链接图是节点－链接法的一个变种，节点－链接法是指用节点表示对象，用线（或边）表示关系的节点－链接布局(node-link)的一种可视化布局表示。弧长链接图在此概念的基础上，采用一维布局方式，即节点沿某个线性轴或环状排列，用圆弧表达节点之间的链接关系。这种方法不能像二维布局那样表达图的全局结构，但在节点良好排序后可清晰的呈现环和桥的结构。\n\n```js | radio \"options: { labels: ['polar', 'rect'], values: ['polar', 'rect'] }; pin: false\"\narcCoordinate = 'polar';\n```\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 600,\n    height: 400,\n  });\n\n  chart.data({\n    value: miserables,\n    transform: [{ type: 'arc', y: arcCoordinate === 'polar' ? 1 : 0.3 }],\n  });\n\n  if (arcCoordinate === 'polar') {\n    chart.coordinate({ type: arcCoordinate });\n  }\n\n  chart\n    .link()\n    .data({\n      transform: [{ type: 'custom', callback: (v) => v.edges }],\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('color', 'source')\n    .encode('shape', 'arc')\n    .axis(false)\n    .legend(false)\n    .scale('x', { domain: [0, 1] })\n    .scale('y', { domain: [0, 1] })\n    .scale('color', { type: 'ordinal' })\n    .style('opacity', 0.5);\n\n  chart\n    .point()\n    .data({\n      transform: [{ type: 'custom', callback: (v) => v.nodes }],\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('size', 'value')\n    .encode('color', 'name');\n\n  return chart.render().node();\n})();\n```\n\n### 力导图（Force-directed）\n\n力导布局图是一种用来呈现复杂关系网络的图表。在力导布局图中，系统中的每个节点都可以看成是一个放电粒子，粒子间存在某种斥力。同时，这些粒子间被它们之间的“边”所牵连，从而产生引力。\n\n```js\n(() => {\n  const flatten = (data) => {\n    const root = d3.hierarchy(data);\n    return {\n      links: root.links(),\n      nodes: root.descendants(),\n    };\n  };\n  // @see https://bl.ocks.org/mbostock/1667139\n  // compute a static force layout\n  const layout = (data) => {\n    const { links, nodes } = data;\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        'link',\n        d3\n          .forceLink(links)\n          .id((d) => d.id)\n          .distance(0)\n          .strength(1),\n      )\n      .force('charge', d3.forceManyBody().strength(-50))\n      .force('x', d3.forceX())\n      .force('y', d3.forceY())\n      .stop();\n    const n = Math.ceil(\n      Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay()),\n    );\n    for (let i = 0; i < n; ++i) simulation.tick();\n    return data;\n  };\n  const links = (d) => d.links;\n  const nodes = (d) => d.nodes;\n  const chart = new G2.Chart({\n    width: 640,\n    height: 640,\n  });\n\n  chart.data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/233673d6-9c84-4ba2-98be-992fb1b34593.json',\n    transform: [\n      { type: 'custom', callback: flatten },\n      { type: 'custom', callback: layout },\n    ],\n  });\n\n  chart\n    .link()\n    .data({\n      transform: [{ type: 'custom', callback: links }],\n    })\n    .encode('x', [(d) => d.source.x, (d) => d.target.x])\n    .encode('y', [(d) => d.source.y, (d) => d.target.y])\n    .axis(false)\n    .style('stroke', '#ddd');\n\n  chart\n    .point()\n    .data({\n      transform: [{ type: 'custom', callback: nodes }],\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('size', 10)\n    .encode('color', (d) => d.data.type)\n    .encode('title', (d) => d.data.type)\n    .encode('tooltip', (d) => d.data.name);\n\n  return chart.render().node();\n})();\n```\n\n## FAQ\n\n> TODO\n\n## 依赖\n\n```js | dom \"pin: false\"\nd3 = (async () => {\n  const { hierarchy } = await genji.require('d3-hierarchy');\n  const { forceSimulation, forceLink, forceManyBody, forceX, forceY } =\n    await genji.require('d3-force');\n  return {\n    hierarchy,\n    forceSimulation,\n    forceLink,\n    forceManyBody,\n    forceX,\n    forceY,\n  };\n})();\n```\n"}