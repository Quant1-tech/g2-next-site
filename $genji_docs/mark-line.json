{"markdown":"# Line\n\n## Basic Line\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    paddingLeft: 60,\n  });\n\n  chart\n    .line()\n    .data([\n      { year: '1991', value: 15468 },\n      { year: '1992', value: 16100 },\n      { year: '1993', value: 15900 },\n      { year: '1994', value: 17409 },\n      { year: '1995', value: 17000 },\n      { year: '1996', value: 31056 },\n      { year: '1997', value: 31982 },\n      { year: '1998', value: 32040 },\n      { year: '1999', value: 33233 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value');\n\n  return chart.render().node();\n})();\n```\n\n## Smooth Line\n\n**Smooth line with default alpha**\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    paddingLeft: 60,\n  });\n\n  chart\n    .line()\n    .data([\n      { year: '1991', value: 15468 },\n      { year: '1992', value: 16100 },\n      { year: '1993', value: 15900 },\n      { year: '1994', value: 17409 },\n      { year: '1995', value: 17000 },\n      { year: '1996', value: 31056 },\n      { year: '1997', value: 31982 },\n      { year: '1998', value: 32040 },\n      { year: '1999', value: 33233 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('shape', 'smooth');\n\n  return chart.render().node();\n})();\n```\n\n## Alpha for Smooth\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    paddingLeft: 60,\n  });\n  const alpha = ({ alphas = [] }) => {\n    if (!Array.isArray(alphas)) return (context) => context;\n    return (data) => {\n      return alphas.flatMap((alpha) =>\n        data.map((d) => Object.assign({}, d, { alpha })),\n      );\n    };\n  };\n\n  chart\n    .line()\n    .data({\n      value: [\n        { year: '1991', value: 15468 },\n        { year: '1992', value: 16100 },\n        { year: '1993', value: 15900 },\n        { year: '1994', value: 17409 },\n        { year: '1995', value: 17000 },\n        { year: '1996', value: 31056 },\n        { year: '1997', value: 31982 },\n        { year: '1998', value: 32040 },\n        { year: '1999', value: 33233 },\n      ],\n      transform: [{ type: alpha, alphas: [0, 0.25, 0.5, 0.75, 1] }],\n    })\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('color', (d) => `${d.alpha}`)\n    .encode('shape', {\n      type: 'transform',\n      value: (d) => ({\n        type: 'smooth',\n        alpha: d.alpha,\n      }),\n    });\n\n  return chart.render().node();\n})();\n```\n\n## Gradient Line\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    paddingLeft: 60,\n  });\n\n  chart\n    .line()\n    .data([\n      { year: '1991', value: 15468 },\n      { year: '1992', value: 16100 },\n      { year: '1993', value: 15900 },\n      { year: '1994', value: 17409 },\n      { year: '1995', value: 17000 },\n      { year: '1996', value: 31056 },\n      { year: '1997', value: 31982 },\n      { year: '1998', value: 32040 },\n      { year: '1999', value: 33233 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('color', 'value')\n    .encode('shape', 'smooth')\n    .encode('series', 'a')\n    .style('gradient', true);\n\n  return chart.render().node();\n})();\n```\n\n## Series Line\n\n**Series channel to group line.**\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data([\n      { month: 'Jan', city: 'Tokyo', temperature: 7 },\n      { month: 'Jan', city: 'London', temperature: 3.9 },\n      { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n      { month: 'Feb', city: 'London', temperature: 4.2 },\n      { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n      { month: 'Mar', city: 'London', temperature: 5.7 },\n      { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n      { month: 'Apr', city: 'London', temperature: 8.5 },\n      { month: 'May', city: 'Tokyo', temperature: 18.4 },\n      { month: 'May', city: 'London', temperature: 11.9 },\n      { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n      { month: 'Jun', city: 'London', temperature: 15.2 },\n      { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n      { month: 'Jul', city: 'London', temperature: 17 },\n      { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n      { month: 'Aug', city: 'London', temperature: 16.6 },\n      { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n      { month: 'Sep', city: 'London', temperature: 14.2 },\n      { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n      { month: 'Oct', city: 'London', temperature: 10.3 },\n      { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n      { month: 'Nov', city: 'London', temperature: 6.6 },\n      { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n      { month: 'Dec', city: 'London', temperature: 4.8 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'temperature')\n    .encode('series', 'city');\n\n  return chart.render().node();\n})();\n```\n\n**Color channel to group line.**\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data([\n      { month: 'Jan', city: 'Tokyo', temperature: 7 },\n      { month: 'Jan', city: 'London', temperature: 3.9 },\n      { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n      { month: 'Feb', city: 'London', temperature: 4.2 },\n      { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n      { month: 'Mar', city: 'London', temperature: 5.7 },\n      { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n      { month: 'Apr', city: 'London', temperature: 8.5 },\n      { month: 'May', city: 'Tokyo', temperature: 18.4 },\n      { month: 'May', city: 'London', temperature: 11.9 },\n      { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n      { month: 'Jun', city: 'London', temperature: 15.2 },\n      { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n      { month: 'Jul', city: 'London', temperature: 17 },\n      { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n      { month: 'Aug', city: 'London', temperature: 16.6 },\n      { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n      { month: 'Sep', city: 'London', temperature: 14.2 },\n      { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n      { month: 'Oct', city: 'London', temperature: 10.3 },\n      { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n      { month: 'Nov', city: 'London', temperature: 6.6 },\n      { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n      { month: 'Dec', city: 'London', temperature: 4.8 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'temperature')\n    .encode('color', 'city');\n\n  return chart.render().node();\n})();\n```\n\n## Temporal Channel\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/ab55d10f-24da-465a-9eba-87ac4b7a83ec.json',\n    })\n    .encode('x', (d) => new Date(d.Date))\n    .encode('y', 'Close');\n\n  return chart.render().node();\n})();\n```\n\n## Size Channel\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data([\n      { month: 'Jan', city: 'Tokyo', temperature: 7 },\n      { month: 'Jan', city: 'London', temperature: 3.9 },\n      { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n      { month: 'Feb', city: 'London', temperature: 4.2 },\n      { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n      { month: 'Mar', city: 'London', temperature: 5.7 },\n      { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n      { month: 'Apr', city: 'London', temperature: 8.5 },\n      { month: 'May', city: 'Tokyo', temperature: 18.4 },\n      { month: 'May', city: 'London', temperature: 11.9 },\n      { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n      { month: 'Jun', city: 'London', temperature: 15.2 },\n      { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n      { month: 'Jul', city: 'London', temperature: 17 },\n      { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n      { month: 'Aug', city: 'London', temperature: 16.6 },\n      { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n      { month: 'Sep', city: 'London', temperature: 14.2 },\n      { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n      { month: 'Oct', city: 'London', temperature: 10.3 },\n      { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n      { month: 'Nov', city: 'London', temperature: 6.6 },\n      { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n      { month: 'Dec', city: 'London', temperature: 4.8 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'temperature')\n    .encode('color', 'city')\n    .encode('size', 'city');\n\n  return chart.render().node();\n})();\n```\n\n## Parallel Line\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 720,\n    paddingLeft: 60,\n  });\n\n  chart.coordinate({ type: 'parallel' });\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n      callback: (d) => Object.assign(d, { year: new Date(d.year) }),\n      transform: [\n        {\n          type: 'filterBy',\n          // Filter data with defined Horsepower and Miles_per_Gallon.\n          fields: ['Horsepower', 'Miles_per_Gallon'],\n        },\n      ],\n    })\n    .encode('position', [\n      'Cylinders',\n      'Displacement',\n      'Weight_in_lbs',\n      'Horsepower',\n      'Acceleration',\n      'Miles_per_Gallon',\n      'Year',\n    ])\n    .encode('color', 'Origin')\n    .encode('size', 1.01)\n    .style('strokeOpacity', 0.3)\n    // zIndex of mark is default to 0.\n    // zIndex of component is default to -1.\n    // Set zIndex to 1 for component to draw above marks.\n    .scale('position', { nice: true, guide: { zIndex: 1 } })\n    .scale('position1', { nice: true, guide: { zIndex: 1 } })\n    .scale('position2', { nice: true, guide: { zIndex: 1 } })\n    .scale('position3', { nice: true, guide: { zIndex: 1 } })\n    .scale('position4', { nice: true, guide: { zIndex: 1 } })\n    .scale('position5', { nice: true, guide: { zIndex: 1 } });\n\n  return chart.render().node();\n})();\n```\n\n## Polar line\n\n```js\n(() => {\n  const chart = new G2.Chart();\n  const xycolor = (node) => {\n    node.encode('x', 'item').encode('y', 'score').encode('color', 'user');\n  };\n\n  chart\n    .data([\n      { item: 'Design', user: 'a', score: 70 },\n      { item: 'Design', user: 'b', score: 30 },\n      { item: 'Development', user: 'a', score: 60 },\n      { item: 'Development', user: 'b', score: 70 },\n      { item: 'Marketing', user: 'a', score: 50 },\n      { item: 'Marketing', user: 'b', score: 60 },\n      { item: 'Users', user: 'a', score: 40 },\n      { item: 'Users', user: 'b', score: 50 },\n      { item: 'Test', user: 'a', score: 60 },\n      { item: 'Test', user: 'b', score: 70 },\n      { item: 'Language', user: 'a', score: 70 },\n      { item: 'Language', user: 'b', score: 50 },\n      { item: 'Technology', user: 'a', score: 50 },\n      { item: 'Technology', user: 'b', score: 40 },\n      { item: 'Support', user: 'a', score: 30 },\n      { item: 'Support', user: 'b', score: 40 },\n      { item: 'Sales', user: 'a', score: 60 },\n      { item: 'Sales', user: 'b', score: 40 },\n      { item: 'UX', user: 'a', score: 50 },\n      { item: 'UX', user: 'b', score: 60 },\n    ])\n    .coordinate({ type: 'polar' })\n    .interaction({\n      type: 'tooltip',\n      shared: true,\n      showCrosshairs: true,\n      crosshairs: { type: 'xy' },\n    });\n\n  chart\n    .line()\n    .call(xycolor)\n    .scale('x', { padding: 0.5, align: 0 })\n    .scale('y', { domain: [0, 80] })\n    .scale('color', { guide: { title: null } });\n\n  chart.point().call(xycolor);\n\n  return chart.render().node();\n})();\n```\n\n## Parallel+Polar Line\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.coordinate({ type: 'parallel' }).coordinate({ type: 'polar' });\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n      callback: (d) => Object.assign(d, { year: new Date(d.year) }),\n      transform: [\n        {\n          type: 'filterBy',\n          // Filter data with defined Horsepower and Miles_per_Gallon.\n          fields: ['Horsepower', 'Miles_per_Gallon'],\n        },\n      ],\n    })\n    .encode('position', [\n      'Cylinders',\n      'Displacement',\n      'Weight_in_lbs',\n      'Horsepower',\n      'Acceleration',\n      'Miles_per_Gallon',\n      'Year',\n      'Cylinders', // Close the line\n    ])\n    .encode('color', 'Origin')\n    .encode('size', 1.01)\n    .style('strokeOpacity', 0.3)\n    // zIndex of mark is default to 0.\n    // zIndex of component is default to -1.\n    // Set zIndex to 1 for component to draw above marks.\n    .scale('position', { nice: true, guide: { zIndex: 1 } })\n    .scale('position1', { nice: true, guide: { zIndex: 1 } })\n    .scale('position2', { nice: true, guide: { zIndex: 1 } })\n    .scale('position3', { nice: true, guide: { zIndex: 1 } })\n    .scale('position4', { nice: true, guide: { zIndex: 1 } })\n    .scale('position5', { nice: true, guide: { zIndex: 1 } });\n\n  return chart.render().node();\n})();\n```\n"}