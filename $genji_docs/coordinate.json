{"markdown":"# Coordinate\n\n## Cartesian\n\nCartesian coordinate will append to coordinate if is not specified.\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  return chart.render().node();\n})();\n```\n\n## Polar\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart.coordinate({ type: 'polar' });\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .scale('x', { padding: 0.05 })\n    .scale('y', { guide: null })\n    .style('radius', 10);\n\n  return chart.render().node();\n})();\n```\n\n## Transpose\n\n```js\n(() => {\n  const chart = new G2.Chart({ paddingLeft: 80 });\n\n  chart.coordinate({ type: 'transpose' });\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  return chart.render().node();\n})();\n```\n\n## Parallel\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 720,\n    paddingLeft: 60,\n  });\n\n  chart.coordinate({ type: 'parallel' });\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n      callback: (d) => Object.assign(d, { year: new Date(d.year) }),\n      transform: [\n        {\n          type: 'filterBy',\n          // Filter data with defined Horsepower and Miles_per_Gallon.\n          fields: ['Horsepower', 'Miles_per_Gallon'],\n        },\n      ],\n    })\n    .encode('position', [\n      'Cylinders',\n      'Displacement',\n      'Weight_in_lbs',\n      'Horsepower',\n      'Acceleration',\n      'Miles_per_Gallon',\n      'Year',\n    ])\n    .encode('color', 'Origin')\n    .encode('size', 1.01)\n    .style('strokeOpacity', 0.3)\n    // zIndex of mark is default to 0.\n    // zIndex of component is default to -1.\n    // Set zIndex to 1 for component to draw above marks.\n    .scale('position', { nice: true, guide: { zIndex: 1 } })\n    .scale('position1', { nice: true, guide: { zIndex: 1 } })\n    .scale('position2', { nice: true, guide: { zIndex: 1 } })\n    .scale('position3', { nice: true, guide: { zIndex: 1 } })\n    .scale('position4', { nice: true, guide: { zIndex: 1 } })\n    .scale('position5', { nice: true, guide: { zIndex: 1 } });\n\n  return chart.render().node();\n})();\n```\n\n## Fisheye\n\nFisheye coordinate must be specified after cartesian coordinate.\n\n```js | dom\n(() => {\n  const chart = new G2.Chart();\n\n  chart.coordinate({ type: 'fisheye', focusX: 0.5, focusY: 0.5 });\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n    })\n    .encode('x', 'GDP')\n    .encode('y', 'LifeExpectancy')\n    .encode('size', 'Population')\n    .encode('size', 'Population')\n    .encode('color', 'continent')\n    .scale('size', { type: 'log', range: [4, 20] })\n    .scale('x', { guide: { label: { autoHide: true } } })\n    .style('fillOpacity', 0.3)\n    .style('lineWidth', 1);\n\n  return chart.render().node();\n})();\n```\n"}