{"markdown":"# Line\n\n## Basic Line\n\n```js | dom\nG2.render({\n  type: 'line',\n  data: [\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n  },\n});\n```\n\n## Smooth Line\n\n**Smooth line with default alpha**\n\n```js | dom\nG2.render({\n  type: 'line',\n  data: [\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ],\n  encode: {\n    x: 'year',\n    y: 'value',\n    shape: 'smooth',\n  },\n});\n```\n\n**Alpha for smooth shape.**\n\n```js | dom\nG2.render({\n  type: 'line',\n  data: [\n    { year: '1991', value: 15468 },\n    { year: '1992', value: 16100 },\n    { year: '1993', value: 15900 },\n    { year: '1994', value: 17409 },\n    { year: '1995', value: 17000 },\n    { year: '1996', value: 31056 },\n    { year: '1997', value: 31982 },\n    { year: '1998', value: 32040 },\n    { year: '1999', value: 33233 },\n  ],\n  transform: [\n    {\n      type: ({ alphas = [] }) => {\n        if (!Array.isArray(alphas)) return (context) => context;\n        return ({ data }) => {\n          const newData = alphas.flatMap((alpha) =>\n            data.map((d) => ({\n              ...d,\n              alpha,\n            })),\n          );\n          return {\n            data: newData,\n          };\n        };\n      },\n      alphas: [0, 0.25, 0.5, 0.75, 1],\n    },\n  ],\n  scale: {\n    color: { field: 'alpha' },\n  },\n  encode: {\n    x: 'year',\n    y: 'value',\n    color: (d) => `${d.alpha}`,\n    shape: {\n      type: 'transform',\n      value: (d) => ({\n        type: 'smooth',\n        alpha: d.alpha,\n      }),\n    },\n  },\n});\n```\n\n## Series Line\n\n**Series channel to group line.**\n\n```js | dom\nG2.render({\n  type: 'line',\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: 7 },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n    { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n    { month: 'Apr', city: 'London', temperature: 8.5 },\n    { month: 'May', city: 'Tokyo', temperature: 18.4 },\n    { month: 'May', city: 'London', temperature: 11.9 },\n    { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n    { month: 'Jun', city: 'London', temperature: 15.2 },\n    { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n    { month: 'Jul', city: 'London', temperature: 17 },\n    { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n    { month: 'Aug', city: 'London', temperature: 16.6 },\n    { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n    { month: 'Sep', city: 'London', temperature: 14.2 },\n    { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n    { month: 'Oct', city: 'London', temperature: 10.3 },\n    { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n    { month: 'Nov', city: 'London', temperature: 6.6 },\n    { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n    { month: 'Dec', city: 'London', temperature: 4.8 },\n  ],\n  scale: { y: { field: 'temp' } },\n  encode: {\n    x: 'month',\n    y: 'temperature',\n    series: 'city',\n  },\n});\n```\n\n**Color channel to group line.**\n\n```js | dom\nG2.render({\n  type: 'line',\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: 7 },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n    { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n    { month: 'Apr', city: 'London', temperature: 8.5 },\n    { month: 'May', city: 'Tokyo', temperature: 18.4 },\n    { month: 'May', city: 'London', temperature: 11.9 },\n    { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n    { month: 'Jun', city: 'London', temperature: 15.2 },\n    { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n    { month: 'Jul', city: 'London', temperature: 17 },\n    { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n    { month: 'Aug', city: 'London', temperature: 16.6 },\n    { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n    { month: 'Sep', city: 'London', temperature: 14.2 },\n    { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n    { month: 'Oct', city: 'London', temperature: 10.3 },\n    { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n    { month: 'Nov', city: 'London', temperature: 6.6 },\n    { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n    { month: 'Dec', city: 'London', temperature: 4.8 },\n  ],\n  scale: { y: { field: 'temp' } },\n  encode: {\n    x: 'month',\n    y: 'temperature',\n    color: 'city',\n  },\n});\n```\n\n## Temporal Channel\n\n```js | dom\nG2.render({\n  type: 'line',\n  transform: [\n    {\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/ab55d10f-24da-465a-9eba-87ac4b7a83ec.json',\n    },\n  ],\n  encode: {\n    // Convert to Date Object will infer time scale for this channel.\n    x: (d) => new Date(d.Date),\n    y: 'Close',\n  },\n});\n```\n\n## Size Channel\n\n```js | dom\nG2.render({\n  type: 'line',\n  data: [\n    { month: 'Jan', city: 'Tokyo', temperature: 7 },\n    { month: 'Jan', city: 'London', temperature: 3.9 },\n    { month: 'Feb', city: 'Tokyo', temperature: 6.9 },\n    { month: 'Feb', city: 'London', temperature: 4.2 },\n    { month: 'Mar', city: 'Tokyo', temperature: 9.5 },\n    { month: 'Mar', city: 'London', temperature: 5.7 },\n    { month: 'Apr', city: 'Tokyo', temperature: 14.5 },\n    { month: 'Apr', city: 'London', temperature: 8.5 },\n    { month: 'May', city: 'Tokyo', temperature: 18.4 },\n    { month: 'May', city: 'London', temperature: 11.9 },\n    { month: 'Jun', city: 'Tokyo', temperature: 21.5 },\n    { month: 'Jun', city: 'London', temperature: 15.2 },\n    { month: 'Jul', city: 'Tokyo', temperature: 25.2 },\n    { month: 'Jul', city: 'London', temperature: 17 },\n    { month: 'Aug', city: 'Tokyo', temperature: 26.5 },\n    { month: 'Aug', city: 'London', temperature: 16.6 },\n    { month: 'Sep', city: 'Tokyo', temperature: 23.3 },\n    { month: 'Sep', city: 'London', temperature: 14.2 },\n    { month: 'Oct', city: 'Tokyo', temperature: 18.3 },\n    { month: 'Oct', city: 'London', temperature: 10.3 },\n    { month: 'Nov', city: 'Tokyo', temperature: 13.9 },\n    { month: 'Nov', city: 'London', temperature: 6.6 },\n    { month: 'Dec', city: 'Tokyo', temperature: 9.6 },\n    { month: 'Dec', city: 'London', temperature: 4.8 },\n  ],\n  encode: {\n    x: 'month',\n    y: 'temperature',\n    color: 'city',\n    size: 'city', // Size channel\n  },\n});\n```\n\n## Parallel Line\n\n```js | dom\nG2.render({\n  type: 'line',\n  width: 720,\n  paddingLeft: 80,\n  transform: [\n    {\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n      callback: ({ Year, ...rest }) => ({\n        Year: new Date(Year),\n        ...rest,\n      }),\n    },\n    {\n      type: 'filterBy',\n      // Filter data with defined Horsepower and Miles_per_Gallon.\n      fields: ['Horsepower', 'Miles_per_Gallon'],\n    },\n  ],\n  coordinate: [{ type: 'parallel' }],\n  scale: {\n    // zIndex of mark is default to 0.\n    // zIndex of component is default to -1.\n    // Set zIndex to 1 for component to draw above marks.\n    position: { nice: true, guide: { zIndex: 1 } },\n    position1: { nice: true, guide: { zIndex: 1 } },\n    position2: { nice: true, guide: { zIndex: 1 } },\n    position3: { nice: true, guide: { zIndex: 1 } },\n    position4: { nice: true, guide: { zIndex: 1 } },\n    position5: { nice: true, guide: { zIndex: 1 } },\n  },\n  encode: {\n    position: [\n      'Cylinders',\n      'Displacement',\n      'Weight_in_lbs',\n      'Horsepower',\n      'Acceleration',\n      'Miles_per_Gallon',\n      'Year',\n    ],\n    color: 'Origin',\n    size: 1.01,\n  },\n  style: {\n    strokeOpacity: 0.3,\n  },\n});\n```\n\n## Parallel+Polar Line\n\n```js | dom\nG2.render({\n  type: 'line',\n  width: 720,\n  paddingLeft: 80,\n  transform: [\n    {\n      type: 'fetch',\n      url: 'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n      callback: ({ Year, ...rest }) => ({\n        Year: new Date(Year),\n        ...rest,\n      }),\n    },\n    {\n      type: 'filterBy',\n      fields: ['Horsepower', 'Miles_per_Gallon'],\n    },\n  ],\n  coordinate: [{ type: 'parallel' }, { type: 'polar' }],\n  scale: {\n    position: { nice: true, guide: { zIndex: 1 } },\n    position1: { nice: true, guide: { zIndex: 1 } },\n    position2: { nice: true, guide: { zIndex: 1 } },\n    position3: { nice: true, guide: { zIndex: 1 } },\n    position4: { nice: true, guide: { zIndex: 1 } },\n    position5: { nice: true, guide: { zIndex: 1 } },\n  },\n  encode: {\n    position: [\n      'Cylinders',\n      'Displacement',\n      'Weight_in_lbs',\n      'Horsepower',\n      'Acceleration',\n      'Miles_per_Gallon',\n      'Year',\n      'Cylinders', // Close the line\n    ],\n    color: 'Origin',\n    size: 1.01,\n  },\n  style: {\n    strokeOpacity: 0.3,\n  },\n});\n```\n"}