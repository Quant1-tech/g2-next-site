{"markdown":"# Spatial\n\n## Layer\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  const layer = chart.layer().data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ]);\n\n  layer\n    .view()\n    .interval()\n    .transform({ type: 'sortBy', fields: ['sold'], order: 'DESC' })\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  layer\n    .view()\n    .paddingBottom(200)\n    .paddingLeft(400)\n    .coordinate({ type: 'transpose' })\n    .coordinate({ type: 'polar' })\n    .interval()\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .scale('color', { guide: null });\n\n  return chart.render().node();\n})();\n```\n\n## Row(Flex)\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 800,\n  });\n\n  const flex = chart.flex().data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ]);\n\n  flex\n    .view()\n    .interval()\n    .transform({ type: 'sortBy', fields: ['sold'], order: 'DESC' })\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  flex\n    .view()\n    .coordinate({ type: 'transpose' })\n    .interval()\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  return chart.render().node();\n})();\n```\n\n## Col(Flex)\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    height: 800,\n  });\n  const flex = chart\n    .flex()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .direction('col');\n\n  flex\n    .view()\n    .interval()\n    .transform({ type: 'sortBy', fields: ['sold'], order: 'DESC' })\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  flex\n    .view()\n    .paddingLeft(72)\n    .coordinate({ type: 'transpose' })\n    .interval()\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  return chart.render().node();\n})();\n```\n\n## Nested(Flex)\n\n```js\n(() => {\n  const chart = new G2.Chart({\n    width: 840,\n    height: 600,\n  });\n\n  const f1 = chart\n    .flex()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .direction('row');\n\n  f1.view()\n    .interval()\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  const f2 = f1.flex().direction('col');\n\n  f2.view()\n    .coordinate({ type: 'transpose' })\n    .interval()\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  f2.view()\n    .coordinate({ type: 'polar' })\n    .interval()\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .scale('y', { guide: null });\n\n  return chart.render().node();\n})();\n```\n"}