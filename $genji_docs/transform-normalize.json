{"markdown":"# Normalize\n\nThe **normalize** transform group marks into series by specified channels, and then transform each series's value, say to transform them relative to some basis to apply a moving average. The default basis is `max` and the marks are grouped by `x` channel by default. The built-in basis is as followed:\n\n- min\n- max\n- first\n- last\n- mean\n- extent\n- median\n- sum\n- deviation\n\n## Normalized Stacked Interval\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .transform({ type: 'normalizeY' })\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city');\n\n  return chart.render().node();\n})();\n```\n\n## Normalized Stacked Dodged Interval\n\nOptions `groupBy` can be specified as an array.\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antfincdn/mor%26R5yBI9/stack-group-column.json',\n    })\n    .transform({ type: 'normalizeY', groupBy: ['x', 'series'] })\n    .encode('x', 'product_type')\n    .encode('y', 'order_amt')\n    .encode('color', 'product_sub_type')\n    .encode('series', 'sex')\n    .scale('y', { field: 'order' });\n\n  return chart.render().node();\n})();\n```\n\n## Normalized Stacked Area\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .area()\n    .data({\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/e58c9758-0a09-4527-aa90-fbf175b45925.json',\n    })\n    .transform({ type: 'stackY' })\n    .transform({ type: 'normalizeY' })\n    .encode('x', (d) => new Date(d.date))\n    .encode('y', 'unemployed')\n    .encode('color', 'industry')\n    .encode('shape', 'smoothArea')\n    .scale('x', { field: 'Date' })\n    .scale('color', {\n      guide: { size: 72, autoWrap: true, maxRows: 3, cols: 6 },\n    });\n\n  return chart.render().node();\n})();\n```\n\n## Normalized Line\n\nSpecifies `basis` to `first`.\n\n```js\n(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/bmw-prod/6a9b4091-2fe1-4649-89f3-f9a211827811.json',\n    })\n    .transform({ type: 'normalizeY', groupBy: 'series', basis: 'first' })\n    .encode('x', (d) => new Date(d.Date))\n    .encode('y', 'Close')\n    .encode('color', 'Symbol')\n    .scale('x', { field: 'Date' });\n\n  return chart.render().node();\n})();\n```\n"}